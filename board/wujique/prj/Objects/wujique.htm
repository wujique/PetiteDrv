<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\wujique.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\wujique.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Jun 04 14:32:19 2023
<BR><P>
<H3>Maximum Stack Usage =       1320 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vfs_lfs_file_open &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_demove &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8e]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e]">CAN1_RX1_IRQHandler</a><BR>
 <LI><a href="#[40a]">serial_putc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40a]">serial_putc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8b]">ADC_IRQHandler</a> from stm32f4xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[73]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8d]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8e]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8f]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8c]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b9]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ba]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bb]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b8]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c8]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c7]">DCMI_IRQHandler</a> from stm32f4xx_it.o(i.DCMI_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[84]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[85]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[86]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[87]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[88]">DMA1_Stream4_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[89]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8a]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a8]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b1]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b2]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b3]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b4]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b5]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bd]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[be]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bf]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[76]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b6]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b7]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7f]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a1]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[80]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[81]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[82]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[83]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[90]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7d]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ca]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a9]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6d]">FontAsc6X12_get_glyph_bitmap</a> from font_asc_6x12.o(i.FontAsc6X12_get_glyph_bitmap) referenced 2 times from font_asc_6x12.o(.data)
 <LI><a href="#[6c]">FontAsc6X12_get_glyph_dsc</a> from font_asc_6x12.o(i.FontAsc6X12_get_glyph_dsc) referenced 2 times from font_asc_6x12.o(.data)
 <LI><a href="#[6b]">FontVGA8x16_get_glyph_bitmap</a> from font_8x16.o(i.FontVGA8x16_get_glyph_bitmap) referenced 2 times from font_8x16.o(.data)
 <LI><a href="#[6a]">FontVGA8x16_get_glyph_dsc</a> from font_8x16.o(i.FontVGA8x16_get_glyph_dsc) referenced 2 times from font_8x16.o(.data)
 <LI><a href="#[69]">FontVga6X12_get_glyph_bitmap</a> from font_6x12.o(i.FontVga6X12_get_glyph_bitmap) referenced 2 times from font_6x12.o(.data)
 <LI><a href="#[68]">FontVga6X12_get_glyph_dsc</a> from font_6x12.o(i.FontVga6X12_get_glyph_dsc) referenced 2 times from font_6x12.o(.data)
 <LI><a href="#[c9]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[71]">HardFault_Handler</a> from cmb_fault.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[99]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[98]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9b]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9a]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c2]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c1]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[72]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[70]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bc]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a3]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c4]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c3]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c6]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c5]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7a]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[77]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7e]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a2]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7c]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6f]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[aa]">SDIO_IRQHandler</a> from stm32f4xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10c]">SD_disk_initialize</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_initialize) referenced from sd_fat.o(.constdata)
 <LI><a href="#[110]">SD_disk_ioctl</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_ioctl) referenced from sd_fat.o(.constdata)
 <LI><a href="#[10e]">SD_disk_read</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_read) referenced from sd_fat.o(.constdata)
 <LI><a href="#[10d]">SD_disk_status</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_status) referenced from sd_fat.o(.constdata)
 <LI><a href="#[10f]">SD_disk_write</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_write) referenced from sd_fat.o(.constdata)
 <LI><a href="#[9c]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9d]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ac]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[75]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[78]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[cc]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[7b]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[91]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[94]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[93]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[92]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[95]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[96]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[97]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ab]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[af]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b0]">TIM7_IRQHandler</a> from stm32f4xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a4]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a7]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a6]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a5]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ad]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ae]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9e]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9f]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a0]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c0]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[74]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[79]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[cd]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[cf]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[cf]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[d4]">alloc_kv_cb</a> from fdb_kvdb.o(i.alloc_kv_cb) referenced from fdb_kvdb.o(i.alloc_kv)
 <LI><a href="#[d6]">bitmapfont_get_glyph_bitmap</a> from font_unicode.o(i.bitmapfont_get_glyph_bitmap) referenced from font_unicode.o(i.bitmapfont_create_from_file)
 <LI><a href="#[d5]">bitmapfont_get_glyph_dsc</a> from font_unicode.o(i.bitmapfont_get_glyph_dsc) referenced from font_unicode.o(i.bitmapfont_create_from_file)
 <LI><a href="#[d7]">board_app_task</a> from board.o(i.board_app_task) referenced from board.o(i.board_app_init)
 <LI><a href="#[6e]">cap_touch_task_idle</a> from touch.o(i.cap_touch_task_idle) referenced 2 times from touch.o(.data)
 <LI><a href="#[d1]">check_and_recovery_gc_cb</a> from fdb_kvdb.o(i.check_and_recovery_gc_cb) referenced from fdb_kvdb.o(i._fdb_kv_load)
 <LI><a href="#[d2]">check_and_recovery_kv_cb</a> from fdb_kvdb.o(i.check_and_recovery_kv_cb) referenced from fdb_kvdb.o(i._fdb_kv_load)
 <LI><a href="#[d0]">check_sec_hdr_cb</a> from fdb_kvdb.o(i.check_sec_hdr_cb) referenced from fdb_kvdb.o(i._fdb_kv_load)
 <LI><a href="#[de]">cli_main_loop</a> from cmd.o(i.cli_main_loop) referenced from cmd_port.o(i.fun_cmd_init)
 <LI><a href="#[112]">cmd_display</a> from cmd_display.o(i.cmd_display) referenced from cmd_port.o(.constdata)
 <LI><a href="#[ff]">dev_spiflash_close</a> from drv_spiflash.o(i.dev_spiflash_close) referenced from drv_spiflash.o(.constdata)
 <LI><a href="#[fa]">dev_spiflash_getnode</a> from drv_spiflash.o(i.dev_spiflash_getnode) referenced from drv_spiflash.o(.constdata)
 <LI><a href="#[fb]">dev_spiflash_opennode</a> from drv_spiflash.o(i.dev_spiflash_opennode) referenced from drv_spiflash.o(.constdata)
 <LI><a href="#[102]">dev_xpt2046_close</a> from xpt2046.o(i.dev_xpt2046_close) referenced from xpt2046.o(.constdata)
 <LI><a href="#[100]">dev_xpt2046_init</a> from xpt2046.o(i.dev_xpt2046_init) referenced from xpt2046.o(.constdata)
 <LI><a href="#[101]">dev_xpt2046_open</a> from xpt2046.o(i.dev_xpt2046_open) referenced from xpt2046.o(.constdata)
 <LI><a href="#[d8]">dev_xpt2046_task</a> from xpt2046.o(i.dev_xpt2046_task) referenced from xpt2046.o(i.dev_xpt2046_open)
 <LI><a href="#[e0]">do_gc</a> from fdb_kvdb.o(i.do_gc) referenced from fdb_kvdb.o(i.gc_collect)
 <LI><a href="#[114]">do_help</a> from commnad.o(i.do_help) referenced from cmd_port.o(.constdata)
 <LI><a href="#[111]">do_system_info</a> from cmd_sys.o(i.do_system_info) referenced from cmd_port.o(.constdata)
 <LI><a href="#[113]">do_version</a> from commnad.o(i.do_version) referenced from cmd_port.o(.constdata)
 <LI><a href="#[16]">drv_IL3820_color_fill</a> from drv_il3820.o(i.drv_IL3820_color_fill) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1b]">drv_IL3820_display_onoff</a> from drv_il3820.o(i.drv_IL3820_display_onoff) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[15]">drv_IL3820_drawpoint</a> from drv_il3820.o(i.drv_IL3820_drawpoint) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[17]">drv_IL3820_fill</a> from drv_il3820.o(i.drv_IL3820_fill) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[19]">drv_IL3820_flush</a> from drv_il3820.o(i.drv_IL3820_flush) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[14]">drv_IL3820_init</a> from drv_il3820.o(i.drv_IL3820_init) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1d]">drv_IL3820_lcd_bl</a> from drv_il3820.o(i.drv_IL3820_lcd_bl) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[18]">drv_IL3820_prepare_display</a> from drv_il3820.o(i.drv_IL3820_prepare_display) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1c]">drv_IL3820_scan_dir</a> from drv_il3820.o(i.drv_IL3820_scan_dir) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1a]">drv_IL3820_update</a> from drv_il3820.o(i.drv_IL3820_update) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[20]">drv_IL91874_color_fill</a> from drv_il91874.o(i.drv_IL91874_color_fill) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[25]">drv_IL91874_display_onoff</a> from drv_il91874.o(i.drv_IL91874_display_onoff) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[1f]">drv_IL91874_drawpoint</a> from drv_il91874.o(i.drv_IL91874_drawpoint) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[21]">drv_IL91874_fill</a> from drv_il91874.o(i.drv_IL91874_fill) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[23]">drv_IL91874_flush</a> from drv_il91874.o(i.drv_IL91874_flush) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[1e]">drv_IL91874_init</a> from drv_il91874.o(i.drv_IL91874_init) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[27]">drv_IL91874_lcd_bl</a> from drv_il91874.o(i.drv_IL91874_lcd_bl) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[22]">drv_IL91874_prepare_display</a> from drv_il91874.o(i.drv_IL91874_prepare_display) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[26]">drv_IL91874_scan_dir</a> from drv_il91874.o(i.drv_IL91874_scan_dir) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[24]">drv_IL91874_update</a> from drv_il91874.o(i.drv_IL91874_update) referenced 2 times from drv_il91874.o(.data)
 <LI><a href="#[2a]">drv_ILI9325_color_fill</a> from drv_ili9325.o(i.drv_ILI9325_color_fill) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[2f]">drv_ILI9325_display_onoff</a> from drv_ili9325.o(i.drv_ILI9325_display_onoff) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[29]">drv_ILI9325_drawpoint</a> from drv_ili9325.o(i.drv_ILI9325_drawpoint) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[2b]">drv_ILI9325_fill</a> from drv_ili9325.o(i.drv_ILI9325_fill) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[2d]">drv_ILI9325_flush</a> from drv_ili9325.o(i.drv_ILI9325_flush) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[28]">drv_ILI9325_init</a> from drv_ili9325.o(i.drv_ILI9325_init) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[31]">drv_ILI9325_lcd_bl</a> from drv_ili9325.o(i.drv_ILI9325_lcd_bl) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[2c]">drv_ILI9325_prepare_display</a> from drv_ili9325.o(i.drv_ILI9325_prepare_display) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[30]">drv_ILI9325_scan_dir</a> from drv_ili9325.o(i.drv_ILI9325_scan_dir) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[2e]">drv_ILI9325_update</a> from drv_ili9325.o(i.drv_ILI9325_update) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[3e]">drv_ILI9341_8_color_fill</a> from drv_ili9341.o(i.drv_ILI9341_8_color_fill) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[3d]">drv_ILI9341_8_drawpoint</a> from drv_ili9341.o(i.drv_ILI9341_8_drawpoint) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[3f]">drv_ILI9341_8_fill</a> from drv_ili9341.o(i.drv_ILI9341_8_fill) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[41]">drv_ILI9341_8_flush</a> from drv_ili9341.o(i.drv_ILI9341_8_flush) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[3c]">drv_ILI9341_8_init</a> from drv_ili9341.o(i.drv_ILI9341_8_init) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[40]">drv_ILI9341_8_prepare_display</a> from drv_ili9341.o(i.drv_ILI9341_8_prepare_display) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[43]">drv_ILI9341_8_scan_dir</a> from drv_ili9341.o(i.drv_ILI9341_8_scan_dir) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[42]">drv_ILI9341_8_update</a> from drv_ili9341.o(i.drv_ILI9341_8_update) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[34]">drv_ILI9341_color_fill</a> from drv_ili9341.o(i.drv_ILI9341_color_fill) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[39]">drv_ILI9341_display_onoff</a> from drv_ili9341.o(i.drv_ILI9341_display_onoff) referenced 4 times from drv_ili9341.o(.data)
 <LI><a href="#[33]">drv_ILI9341_drawpoint</a> from drv_ili9341.o(i.drv_ILI9341_drawpoint) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[35]">drv_ILI9341_fill</a> from drv_ili9341.o(i.drv_ILI9341_fill) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[37]">drv_ILI9341_flush</a> from drv_ili9341.o(i.drv_ILI9341_flush) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[32]">drv_ILI9341_init</a> from drv_ili9341.o(i.drv_ILI9341_init) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[3b]">drv_ILI9341_lcd_bl</a> from drv_ili9341.o(i.drv_ILI9341_lcd_bl) referenced 4 times from drv_ili9341.o(.data)
 <LI><a href="#[36]">drv_ILI9341_prepare_display</a> from drv_ili9341.o(i.drv_ILI9341_prepare_display) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[3a]">drv_ILI9341_scan_dir</a> from drv_ili9341.o(i.drv_ILI9341_scan_dir) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[38]">drv_ILI9341_update</a> from drv_ili9341.o(i.drv_ILI9341_update) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[2]">drv_NT35510_color_fill</a> from drv_nt35510.o(i.drv_NT35510_color_fill) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[7]">drv_NT35510_display_onoff</a> from drv_nt35510.o(i.drv_NT35510_display_onoff) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[1]">drv_NT35510_drawpoint</a> from drv_nt35510.o(i.drv_NT35510_drawpoint) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[3]">drv_NT35510_fill</a> from drv_nt35510.o(i.drv_NT35510_fill) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[5]">drv_NT35510_flush</a> from drv_nt35510.o(i.drv_NT35510_flush) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[0]">drv_NT35510_init</a> from drv_nt35510.o(i.drv_NT35510_init) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[9]">drv_NT35510_lcd_bl</a> from drv_nt35510.o(i.drv_NT35510_lcd_bl) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[4]">drv_NT35510_prepare_display</a> from drv_nt35510.o(i.drv_NT35510_prepare_display) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[8]">drv_NT35510_scan_dir</a> from drv_nt35510.o(i.drv_NT35510_scan_dir) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[6]">drv_NT35510_update</a> from drv_nt35510.o(i.drv_NT35510_update) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[c]">drv_R61408_color_fill</a> from drv_r61408.o(i.drv_R61408_color_fill) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[11]">drv_R61408_display_onoff</a> from drv_r61408.o(i.drv_R61408_display_onoff) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[b]">drv_R61408_drawpoint</a> from drv_r61408.o(i.drv_R61408_drawpoint) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[d]">drv_R61408_fill</a> from drv_r61408.o(i.drv_R61408_fill) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[f]">drv_R61408_flush</a> from drv_r61408.o(i.drv_R61408_flush) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[a]">drv_R61408_init</a> from drv_r61408.o(i.drv_R61408_init) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[13]">drv_R61408_lcd_bl</a> from drv_r61408.o(i.drv_R61408_lcd_bl) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[e]">drv_R61408_prepare_display</a> from drv_r61408.o(i.drv_R61408_prepare_display) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[12]">drv_R61408_scan_dir</a> from drv_r61408.o(i.drv_R61408_scan_dir) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[10]">drv_R61408_update</a> from drv_r61408.o(i.drv_R61408_update) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[5a]">drv_ST7565_color_fill</a> from drv_str7565.o(i.drv_ST7565_color_fill) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[5f]">drv_ST7565_display_onoff</a> from drv_str7565.o(i.drv_ST7565_display_onoff) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[59]">drv_ST7565_drawpoint</a> from drv_str7565.o(i.drv_ST7565_drawpoint) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[5b]">drv_ST7565_fill</a> from drv_str7565.o(i.drv_ST7565_fill) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[5d]">drv_ST7565_flush</a> from drv_str7565.o(i.drv_ST7565_flush) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[58]">drv_ST7565_init</a> from drv_str7565.o(i.drv_ST7565_init) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[61]">drv_ST7565_lcd_bl</a> from drv_str7565.o(i.drv_ST7565_lcd_bl) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[5c]">drv_ST7565_prepare_display</a> from drv_str7565.o(i.drv_ST7565_prepare_display) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[60]">drv_ST7565_scan_dir</a> from drv_str7565.o(i.drv_ST7565_scan_dir) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[5e]">drv_ST7565_update</a> from drv_str7565.o(i.drv_ST7565_update) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[46]">drv_ST7735R_color_fill</a> from drv_st7735r.o(i.drv_ST7735R_color_fill) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[4b]">drv_ST7735R_display_onoff</a> from drv_st7735r.o(i.drv_ST7735R_display_onoff) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[45]">drv_ST7735R_drawpoint</a> from drv_st7735r.o(i.drv_ST7735R_drawpoint) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[47]">drv_ST7735R_fill</a> from drv_st7735r.o(i.drv_ST7735R_fill) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[49]">drv_ST7735R_flush</a> from drv_st7735r.o(i.drv_ST7735R_flush) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[44]">drv_ST7735R_init</a> from drv_st7735r.o(i.drv_ST7735R_init) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[4d]">drv_ST7735R_lcd_bl</a> from drv_st7735r.o(i.drv_ST7735R_lcd_bl) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[48]">drv_ST7735R_prepare_display</a> from drv_st7735r.o(i.drv_ST7735R_prepare_display) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[4c]">drv_ST7735R_scan_dir</a> from drv_st7735r.o(i.drv_ST7735R_scan_dir) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[4a]">drv_ST7735R_update</a> from drv_st7735r.o(i.drv_ST7735R_update) referenced 2 times from drv_st7735r.o(.data)
 <LI><a href="#[50]">drv_ST7789_color_fill</a> from drv_st7789.o(i.drv_ST7789_color_fill) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[55]">drv_ST7789_display_onoff</a> from drv_st7789.o(i.drv_ST7789_display_onoff) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[4f]">drv_ST7789_drawpoint</a> from drv_st7789.o(i.drv_ST7789_drawpoint) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[51]">drv_ST7789_fill</a> from drv_st7789.o(i.drv_ST7789_fill) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[53]">drv_ST7789_flush</a> from drv_st7789.o(i.drv_ST7789_flush) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[4e]">drv_ST7789_init</a> from drv_st7789.o(i.drv_ST7789_init) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[57]">drv_ST7789_lcd_bl</a> from drv_st7789.o(i.drv_ST7789_lcd_bl) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[52]">drv_ST7789_prepare_display</a> from drv_st7789.o(i.drv_ST7789_prepare_display) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[56]">drv_ST7789_scan_dir</a> from drv_st7789.o(i.drv_ST7789_scan_dir) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[54]">drv_ST7789_update</a> from drv_st7789.o(i.drv_ST7789_update) referenced 2 times from drv_st7789.o(.data)
 <LI><a href="#[63]">drv_ssd1615_display_onoff</a> from drv_str7565.o(i.drv_ssd1615_display_onoff) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[62]">drv_ssd1615_init</a> from drv_str7565.o(i.drv_ssd1615_init) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[d9]">find_kv_cb</a> from fdb_kvdb.o(i.find_kv_cb) referenced from fdb_kvdb.o(i.find_kv_no_cache)
 <LI><a href="#[dd]">font_wjq_get_glyph_bitmap</a> from font_wjq.o(i.font_wjq_get_glyph_bitmap) referenced from font_wjq.o(i.font_wjq_create_from_file)
 <LI><a href="#[dc]">font_wjq_get_glyph_dsc</a> from font_wjq.o(i.font_wjq_get_glyph_dsc) referenced from font_wjq.o(i.font_wjq_create_from_file)
 <LI><a href="#[ce]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[df]">gc_check_cb</a> from fdb_kvdb.o(i.gc_check_cb) referenced from fdb_kvdb.o(i.gc_collect)
 <LI><a href="#[e2]">lfs_alloc_lookahead</a> from lfs.o(i.lfs_alloc_lookahead) referenced from lfs.o(i.lfs_alloc)
 <LI><a href="#[e3]">lfs_dir_commit_commit</a> from lfs.o(i.lfs_dir_commit_commit) referenced from lfs.o(i.lfs_dir_compact)
 <LI><a href="#[e3]">lfs_dir_commit_commit</a> from lfs.o(i.lfs_dir_commit_commit) referenced from lfs.o(i.lfs_dir_relocatingcommit)
 <LI><a href="#[e5]">lfs_dir_commit_size</a> from lfs.o(i.lfs_dir_commit_size) referenced from lfs.o(i.lfs_dir_splittingcompact)
 <LI><a href="#[e4]">lfs_dir_find_match</a> from lfs.o(i.lfs_dir_find_match) referenced from lfs.o(i.lfs_dir_find)
 <LI><a href="#[e4]">lfs_dir_find_match</a> from lfs.o(i.lfs_dir_find_match) referenced from lfs.o(i.lfs_rawmount)
 <LI><a href="#[e6]">lfs_dir_traverse_filter</a> from lfs.o(i.lfs_dir_traverse_filter) referenced from lfs.o(i.lfs_dir_traverse)
 <LI><a href="#[e7]">lfs_fs_parent_match</a> from lfs.o(i.lfs_fs_parent_match) referenced from lfs.o(i.lfs_fs_parent)
 <LI><a href="#[e8]">lfs_fs_size_count</a> from lfs.o(i.lfs_fs_size_count) referenced from lfs.o(i.lfs_fs_rawsize)
 <LI><a href="#[da]">lock</a> from flashdb_demo.o(i.lock) referenced from flashdb_demo.o(i.flashdb_demo)
 <LI><a href="#[cb]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[e9]">petite_task</a> from petite.o(i.petite_task) referenced from petite.o(i.petite_app)
 <LI><a href="#[eb]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[ea]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[f7]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[d3]">sector_statistics_cb</a> from fdb_kvdb.o(i.sector_statistics_cb) referenced from fdb_kvdb.o(i.alloc_kv)
 <LI><a href="#[10b]">storage_empty_close</a> from partition.o(i.storage_empty_close) referenced from partition.o(.constdata)
 <LI><a href="#[10a]">storage_empty_erase</a> from partition.o(i.storage_empty_erase) referenced from partition.o(.constdata)
 <LI><a href="#[104]">storage_empty_getblksize</a> from partition.o(i.storage_empty_getblksize) referenced from partition.o(.constdata)
 <LI><a href="#[106]">storage_empty_getdev</a> from partition.o(i.storage_empty_getdev) referenced from partition.o(.constdata)
 <LI><a href="#[105]">storage_empty_getsize</a> from partition.o(i.storage_empty_getsize) referenced from partition.o(.constdata)
 <LI><a href="#[107]">storage_empty_open</a> from partition.o(i.storage_empty_open) referenced from partition.o(.constdata)
 <LI><a href="#[108]">storage_empty_read</a> from partition.o(i.storage_empty_read) referenced from partition.o(.constdata)
 <LI><a href="#[109]">storage_empty_write</a> from partition.o(i.storage_empty_write) referenced from partition.o(.constdata)
 <LI><a href="#[fe]">storage_spiflash_erase</a> from drv_spiflash.o(i.storage_spiflash_erase) referenced from drv_spiflash.o(.constdata)
 <LI><a href="#[f8]">storage_spiflash_getblksize</a> from drv_spiflash.o(i.storage_spiflash_getblksize) referenced from drv_spiflash.o(.constdata)
 <LI><a href="#[f9]">storage_spiflash_getsize</a> from drv_spiflash.o(i.storage_spiflash_getsize) referenced from drv_spiflash.o(.constdata)
 <LI><a href="#[fc]">storage_spiflash_read</a> from drv_spiflash.o(i.storage_spiflash_read) referenced from drv_spiflash.o(.constdata)
 <LI><a href="#[fd]">storage_spiflash_write</a> from drv_spiflash.o(i.storage_spiflash_write) referenced from drv_spiflash.o(.constdata)
 <LI><a href="#[64]">tlsf_create_with_pool</a> from tlsf.o(i.tlsf_create_with_pool) referenced 2 times from p_malloc.o(.data)
 <LI><a href="#[66]">tlsf_free</a> from tlsf.o(i.tlsf_free) referenced 2 times from p_malloc.o(.data)
 <LI><a href="#[65]">tlsf_malloc</a> from tlsf.o(i.tlsf_malloc) referenced 2 times from p_malloc.o(.data)
 <LI><a href="#[67]">tlsf_realloc</a> from tlsf.o(i.tlsf_realloc) referenced 2 times from p_malloc.o(.data)
 <LI><a href="#[db]">unlock</a> from flashdb_demo.o(i.unlock) referenced from flashdb_demo.o(i.flashdb_demo)
 <LI><a href="#[e1]">var_complete</a> from commnad.o(i.var_complete) referenced from commnad.o(i.install_auto_complete)
 <LI><a href="#[ec]">vfs_fatfs_file_open</a> from vfs.o(i.vfs_fatfs_file_open) referenced from vfs.o(i.vfs_fatfs_mount)
 <LI><a href="#[f5]">vfs_lfs_file_close</a> from vfs.o(i.vfs_lfs_file_close) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[f4]">vfs_lfs_file_lseek</a> from vfs.o(i.vfs_lfs_file_lseek) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[f1]">vfs_lfs_file_open</a> from vfs.o(i.vfs_lfs_file_open) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[f2]">vfs_lfs_file_read</a> from vfs.o(i.vfs_lfs_file_read) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[f6]">vfs_lfs_file_tell</a> from vfs.o(i.vfs_lfs_file_tell) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[f3]">vfs_lfs_file_write</a> from vfs.o(i.vfs_lfs_file_write) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[ef]">vfs_lfs_sto_erase</a> from vfs.o(i.vfs_lfs_sto_erase) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[ee]">vfs_lfs_sto_prog</a> from vfs.o(i.vfs_lfs_sto_prog) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[ed]">vfs_lfs_sto_read</a> from vfs.o(i.vfs_lfs_sto_read) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[f0]">vfs_lfs_sto_sync</a> from vfs.o(i.vfs_lfs_sto_sync) referenced from vfs.o(i.vfs_mount_lfs)
 <LI><a href="#[103]">xpt2046_task</a> from xpt2046.o(i.xpt2046_task) referenced from xpt2046.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[cd]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[43e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[115]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[128]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[43f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[440]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[441]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[442]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[443]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[444]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[75]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[433]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[432]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[77]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[424]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[445]"></a>__asm___14_cm_backtrace_c_13c737ea__cmb_get_msp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cm_backtrace.o(.emb_text), UNUSED)

<P><STRONG><a name="[271]"></a>__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cm_backtrace.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[270]"></a>__asm___14_cm_backtrace_c_13c737ea__cmb_get_sp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cm_backtrace.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[6f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HardFault_Handler &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[446]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[289]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_char
</UL>

<P><STRONG><a name="[447]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_set_status
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[449]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
</UL>

<P><STRONG><a name="[44b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[27b]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_string_sample
</UL>

<P><STRONG><a name="[285]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
</UL>

<P><STRONG><a name="[151]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_complete
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_argv
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_common_prefix
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_macros
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_cb
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[1bc]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_get_node
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_close
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_get
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_display
</UL>

<P><STRONG><a name="[287]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
</UL>

<P><STRONG><a name="[26b]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_to_hist
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main_loop
</UL>

<P><STRONG><a name="[30c]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv_from_cache
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_cb
</UL>

<P><STRONG><a name="[35a]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[35b]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[44c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[44d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[44e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[44f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[11f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1d7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[116]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[450]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[451]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[452]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[453]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[454]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[455]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[390]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[395]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[392]"></a>ADC_CommonInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[38e]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[38d]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[38c]"></a>ADC_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[8b]"></a>ADC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_IRQHandler &rArr; mcu_adc_IRQhandler &rArr; ADC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[393]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[394]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[391]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_TempSensorVrefintCmd))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[12a]"></a>BUS_DCMI_HW_Init</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32f407_hal_msp.o(i.BUS_DCMI_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BUS_DCMI_HW_Init &rArr; MCO1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[73]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BusFault_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; mcu_can1_rx0_IRQ &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can1_rx0_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[396]"></a>CAN_Receive</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can1_rx0_IRQ
</UL>

<P><STRONG><a name="[13c]"></a>DCMI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>DCMI_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>DCMI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_GetITStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearITPendingBit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_frame_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13e]"></a>DCMI_PWDN_RESET_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f407_hal_msp.o(i.DCMI_PWDN_RESET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCMI_PWDN_RESET_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[87]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Stream1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_dma_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>DMA_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[18e]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_stop
</UL>

<P><STRONG><a name="[18f]"></a>DMA_DeInit</STRONG> (Thumb, 278 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[192]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[146]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>DMA_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>DMA_ITConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[190]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[76]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DebugMon_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stimer.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
</UL>

<P><STRONG><a name="[14a]"></a>EPD_select_LUT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_il3820.o(i.EPD_select_LUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = EPD_select_LUT &rArr; drv_il3820_write_data &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
</UL>

<P><STRONG><a name="[413]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
</UL>

<P><STRONG><a name="[456]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx), UNUSED)

<P><STRONG><a name="[399]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
</UL>

<P><STRONG><a name="[398]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
</UL>

<P><STRONG><a name="[14d]"></a>FatFs_FileTest</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, sd_fat.o(i.FatFs_FileTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = FatFs_FileTest &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormat
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>

<P><STRONG><a name="[155]"></a>FatFs_GetVolume</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sd_fat.o(i.FatFs_GetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FatFs_GetVolume &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>

<P><STRONG><a name="[6d]"></a>FontAsc6X12_get_glyph_bitmap</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, font_asc_6x12.o(i.FontAsc6X12_get_glyph_bitmap))
<BR>[Address Reference Count : 1]<UL><LI> font_asc_6x12.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>FontAsc6X12_get_glyph_dsc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, font_asc_6x12.o(i.FontAsc6X12_get_glyph_dsc))
<BR>[Address Reference Count : 1]<UL><LI> font_asc_6x12.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>FontVGA8x16_get_glyph_bitmap</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, font_8x16.o(i.FontVGA8x16_get_glyph_bitmap))
<BR>[Address Reference Count : 1]<UL><LI> font_8x16.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>FontVGA8x16_get_glyph_dsc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, font_8x16.o(i.FontVGA8x16_get_glyph_dsc))
<BR>[Address Reference Count : 1]<UL><LI> font_8x16.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>FontVga6X12_get_glyph_bitmap</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, font_6x12.o(i.FontVga6X12_get_glyph_bitmap))
<BR>[Address Reference Count : 1]<UL><LI> font_6x12.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>FontVga6X12_get_glyph_dsc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, font_6x12.o(i.FontVga6X12_get_glyph_dsc))
<BR>[Address Reference Count : 1]<UL><LI> font_6x12.o(.data)
</UL>
<P><STRONG><a name="[12e]"></a>GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_in
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
</UL>

<P><STRONG><a name="[12d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
</UL>

<P><STRONG><a name="[17f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>

<P><STRONG><a name="[13f]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
</UL>

<P><STRONG><a name="[141]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
</UL>

<P><STRONG><a name="[12b]"></a>MCO1_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mcu_dcmi.o(i.MCO1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MCO1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
</UL>

<P><STRONG><a name="[72]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemManage_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NMI_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>NVIC_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_dcmi_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_NVIC_Configuration
</UL>

<P><STRONG><a name="[224]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[15d]"></a>OV2640_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_ov2640.o(i.OV2640_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OV2640_Init &rArr; OV2640_ReadID &rArr; OV2640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[164]"></a>OV5640_Auto_Focus</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ov5640.o(i.OV5640_Auto_Focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OV5640_Auto_Focus &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[169]"></a>OV5640_Brightness</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ov5640.o(i.OV5640_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OV5640_Brightness &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[16a]"></a>OV5640_Color_Saturation</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ov5640.o(i.OV5640_Color_Saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OV5640_Color_Saturation &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[16b]"></a>OV5640_Contrast</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ov5640.o(i.OV5640_Contrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OV5640_Contrast &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[16c]"></a>OV5640_Flash_Lamp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ov5640.o(i.OV5640_Flash_Lamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OV5640_Flash_Lamp &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[16d]"></a>OV5640_Focus_Init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ov5640.o(i.OV5640_Focus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OV5640_Focus_Init &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[16e]"></a>OV5640_Init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, ov5640.o(i.OV5640_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OV5640_Init &rArr; OV5640_Focus_Init &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Sharpness
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565_Mode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Light_Mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Contrast
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Color_Saturation
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Brightness
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[170]"></a>OV5640_Light_Mode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ov5640.o(i.OV5640_Light_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OV5640_Light_Mode &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[16f]"></a>OV5640_RGB565_Mode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ov5640.o(i.OV5640_RGB565_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OV5640_RGB565_Mode &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[171]"></a>OV5640_Sharpness</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ov5640.o(i.OV5640_Sharpness))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OV5640_Sharpness &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[3a2]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[154]"></a>PrintFormat</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, log.o(i.PrintFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PrintFormat &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[12c]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_dcmi_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
</UL>

<P><STRONG><a name="[397]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
</UL>

<P><STRONG><a name="[39c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[1a2]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[194]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[17c]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[15b]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClockSecuritySystemCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
</UL>

<P><STRONG><a name="[1b6]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[3a5]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[3a4]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[15c]"></a>RCC_MCO1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_MCO1Config))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
</UL>

<P><STRONG><a name="[3a7]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[3a6]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[173]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[174]"></a>RTC_ExitInitMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[172]"></a>RTC_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[3a3]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[175]"></a>RTC_SetDate</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[179]"></a>RTC_SetTime</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[178]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[3a8]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[133]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[199]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[197]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[19c]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[159]"></a>SDIO_DataConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[17b]"></a>SDIO_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[135]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[132]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[198]"></a>SDIO_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[18c]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[136]"></a>SDIO_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[aa]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19a]"></a>SDIO_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[181]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[15a]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[158]"></a>SDIO_SendCommand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[196]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[17e]"></a>SD_Detect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[180]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[18a]"></a>SD_GetCardInfo</STRONG> (Thumb, 612 bytes, Stack size 28 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[182]"></a>SD_GetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[184]"></a>SD_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
</UL>

<P><STRONG><a name="[185]"></a>SD_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_NVIC_Configuration
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
</UL>

<P><STRONG><a name="[189]"></a>SD_InitializeCards</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[18d]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, mcu_sdio.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[193]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, mcu_sdio.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
</UL>

<P><STRONG><a name="[187]"></a>SD_LowLevel_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, mcu_sdio.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[188]"></a>SD_PowerON</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[149]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
</UL>

<P><STRONG><a name="[18b]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[183]"></a>SD_SendStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[19d]"></a>SD_StopTransfer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[19e]"></a>SD_WaitReadOperation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_WaitReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_WaitReadOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
</UL>

<P><STRONG><a name="[19f]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_WaitWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_WaitWriteOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
</UL>

<P><STRONG><a name="[1a0]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
</UL>

<P><STRONG><a name="[10c]"></a>SD_disk_initialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>SD_disk_ioctl</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>SD_disk_read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SD_disk_read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>SD_disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_status))
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>SD_disk_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[39a]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
</UL>

<P><STRONG><a name="[1a1]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
</UL>

<P><STRONG><a name="[39e]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[39f]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[3a0]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[39d]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
</UL>

<P><STRONG><a name="[2d3]"></a>Stime_get_localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stimer.o(i.Stime_get_localtime))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_system_info
</UL>

<P><STRONG><a name="[78]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>TIM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; mcu_tim3_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>TIM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_IRQHandler &rArr; mcu_tim5_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>TIM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM7_IRQHandler &rArr; mcu_tim7_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c2]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3aa]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>

<P><STRONG><a name="[3ad]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>

<P><STRONG><a name="[3ab]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_stop
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>

<P><STRONG><a name="[3b2]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture1))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[3b3]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[3b4]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture3))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[3b5]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture4))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[3b0]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[3b1]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[3a9]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>

<P><STRONG><a name="[1a9]"></a>TIM_ICInit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>

<P><STRONG><a name="[3af]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
</UL>

<P><STRONG><a name="[3b6]"></a>TIM_OC1Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3b8]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3b9]"></a>TIM_OC2Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3bb]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3bc]"></a>TIM_OC3Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3be]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3bf]"></a>TIM_OC4Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3c1]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3b7]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3ba]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3bd]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3c0]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[3ae]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>

<P><STRONG><a name="[1ad]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1af]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1b1]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ab]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[3ac]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>

<P><STRONG><a name="[1a3]"></a>Time_Update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stimer.o(i.Time_Update))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9e]"></a>USART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; mcu_uart1_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>USART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; mcu_uart2_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>USART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; mcu_uart3_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c8]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
</UL>

<P><STRONG><a name="[3c4]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>

<P><STRONG><a name="[3c7]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
</UL>

<P><STRONG><a name="[3ca]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>

<P><STRONG><a name="[3c3]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>

<P><STRONG><a name="[3c9]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
</UL>

<P><STRONG><a name="[1b5]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
</UL>

<P><STRONG><a name="[3c5]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>

<P><STRONG><a name="[3cb]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>

<P><STRONG><a name="[74]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UsageFault_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b7]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[457]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[419]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
</UL>

<P><STRONG><a name="[458]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[459]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b9]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[45a]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3dd]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[45b]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[45c]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ba]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[45d]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[45e]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[45f]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[282]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
</UL>

<P><STRONG><a name="[33c]"></a>__ARM_pop</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lfs.o(i.__ARM_pop))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
</UL>

<P><STRONG><a name="[460]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[461]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[462]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1bb]"></a>_do_help</STRONG> (Thumb, 200 bytes, Stack size 1056 bytes, commnad.o(i._do_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = _do_help &rArr; cmd_usage &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
</UL>

<P><STRONG><a name="[1c0]"></a>_fdb_continue_ff_addr</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, fdb_utils.o(i._fdb_continue_ff_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _fdb_continue_ff_addr &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; petite_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
</UL>

<P><STRONG><a name="[1c2]"></a>_fdb_flash_erase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fdb_utils.o(i._fdb_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fdb_flash_erase &rArr; fal_partition_erase &rArr; petite_partition_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[1c1]"></a>_fdb_flash_read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fdb_utils.o(i._fdb_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fdb_flash_read &rArr; fal_partition_read &rArr; petite_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_continue_ff_addr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv_from_cache
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_kv_addr
</UL>

<P><STRONG><a name="[1c5]"></a>_fdb_flash_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fdb_utils.o(i._fdb_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fdb_flash_write &rArr; fal_partition_write &rArr; petite_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_kv_hdr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
</UL>

<P><STRONG><a name="[1d3]"></a>_fdb_get_status</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, fdb_utils.o(i._fdb_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _fdb_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
</UL>

<P><STRONG><a name="[1c7]"></a>_fdb_init_ex</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, fdb.o(i._fdb_init_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _fdb_init_ex &rArr; fal_partition_getblksize &rArr; petite_partition_getblksize &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_getlen
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_getblksize
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
</UL>

<P><STRONG><a name="[1cc]"></a>_fdb_init_finish</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, fdb.o(i._fdb_init_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fdb_init_finish &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
</UL>

<P><STRONG><a name="[1cd]"></a>_fdb_kv_load</STRONG> (Thumb, 172 bytes, Stack size 152 bytes, fdb_kvdb.o(i._fdb_kv_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
</UL>

<P><STRONG><a name="[1d2]"></a>_fdb_read_status</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fdb_utils.o(i._fdb_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fdb_read_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
</UL>

<P><STRONG><a name="[1d4]"></a>_fdb_set_status</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fdb_utils.o(i._fdb_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fdb_set_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[1d5]"></a>_fdb_write_status</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fdb_utils.o(i._fdb_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_set_status
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_kv_hdr
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
</UL>

<P><STRONG><a name="[3a1]"></a>audio_pipe_callback</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, audio_pipeline.o(i.audio_pipe_callback))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_process
</UL>

<P><STRONG><a name="[1df]"></a>audio_pipe_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, audio_pipeline.o(i.audio_pipe_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = audio_pipe_close &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_stop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>

<P><STRONG><a name="[1e1]"></a>bitmapfont_create_from_file</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, font_unicode.o(i.bitmapfont_create_from_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bitmapfont_create_from_file &rArr; vfs_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[d6]"></a>bitmapfont_get_glyph_bitmap</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, font_unicode.o(i.bitmapfont_get_glyph_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bitmapfont_get_glyph_bitmap &rArr; bitmapfont_get_bitmaphead &rArr; vfs_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_bitmaphead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_unicode.o(i.bitmapfont_create_from_file)
</UL>
<P><STRONG><a name="[d5]"></a>bitmapfont_get_glyph_dsc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, font_unicode.o(i.bitmapfont_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bitmapfont_get_glyph_dsc &rArr; bitmapfont_get_bitmaphead &rArr; vfs_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_bitmaphead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_unicode.o(i.bitmapfont_create_from_file)
</UL>
<P><STRONG><a name="[207]"></a>board_app_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, board.o(i.board_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = board_app_init &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[d7]"></a>board_app_task</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, board.o(i.board_app_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = board_app_task &rArr; sd_fatfs_init &rArr; FatFs_FileTest &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashdb_demo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.board_app_init)
</UL>
<P><STRONG><a name="[20e]"></a>board_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = board_init &rArr; petite_partition_init &rArr; vfs_mount &rArr; vfs_mount_lfs &rArr; lfs_format &rArr; lfs_rawformat &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_dcmi_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_task
</UL>

<P><STRONG><a name="[21e]"></a>board_low_task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, board.o(i.board_low_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = board_low_task &rArr; fun_sound_task &rArr; vfs_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_scan
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_task
</UL>

<P><STRONG><a name="[223]"></a>board_mcu_preinit</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(i.board_mcu_preinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = board_mcu_preinit &rArr; bus_uart_open &rArr; mcu_uart_open &rArr; mcu_uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[421]"></a>board_post_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.board_post_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[420]"></a>board_pre_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.board_pre_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[218]"></a>bus_dcmi_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mcu_dcmi.o(i.bus_dcmi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bus_dcmi_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[163]"></a>bus_i2c_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bus_i2c.o(i.bus_i2c_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bus_i2c_close &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>

<P><STRONG><a name="[161]"></a>bus_i2c_open</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bus_i2c.o(i.bus_i2c_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bus_i2c_open &rArr; osMutexAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_get_node
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
</UL>

<P><STRONG><a name="[22d]"></a>bus_i2c_register</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bus_i2c.o(i.bus_i2c_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bus_i2c_register &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_init_node
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[162]"></a>bus_i2c_transfer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bus_i2c.o(i.bus_i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
</UL>

<P><STRONG><a name="[232]"></a>bus_lcd_IO_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bus_lcd.o(i.bus_lcd_IO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bus_lcd_IO_init &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dev_register
</UL>

<P><STRONG><a name="[235]"></a>bus_lcd_bl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bus_lcd.o(i.bus_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_lcd_bl
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_lcd_bl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_lcd_bl
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_lcd_bl
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_lcd_bl
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_lcd_bl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_lcd_bl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_lcd_bl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_lcd_bl
</UL>

<P><STRONG><a name="[237]"></a>bus_lcd_close</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bus_lcd.o(i.bus_lcd_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bus_lcd_close &rArr; bus_spich_close &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_display_onoff
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_scan_dir
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_lcd_bl
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_flush
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_lcd_bl
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_lcd_bl
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_lcd_bl
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_flush
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_scan_dir
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_display_onoff
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_lcd_bl
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_flush
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_scan_dir
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_display_onoff
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_lcd_bl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_display_onoff
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_lcd_bl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_display_onoff
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_lcd_bl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_flush
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[239]"></a>bus_lcd_open</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bus_lcd.o(i.bus_lcd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_display_onoff
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_scan_dir
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_lcd_bl
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_flush
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_lcd_bl
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_lcd_bl
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_lcd_bl
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_flush
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_scan_dir
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_display_onoff
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_lcd_bl
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_flush
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_scan_dir
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_display_onoff
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_lcd_bl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_display_onoff
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_lcd_bl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_display_onoff
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_lcd_bl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_flush
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[23b]"></a>bus_lcd_read_data</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bus_lcd.o(i.bus_lcd_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bus_lcd_read_data &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
</UL>

<P><STRONG><a name="[23d]"></a>bus_lcd_rst</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bus_lcd.o(i.bus_lcd_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bus_lcd_rst &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
</UL>

<P><STRONG><a name="[2da]"></a>bus_lcd_w_data</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_w_data))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[23e]"></a>bus_lcd_write_cmd</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bus_lcd.o(i.bus_lcd_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bus_lcd_write_cmd &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_display_onoff
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_scan_dir
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_cmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_scan_dir
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_scan_dir
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_display_onoff
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_display_onoff
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
</UL>

<P><STRONG><a name="[23f]"></a>bus_lcd_write_data</STRONG> (Thumb, 108 bytes, Stack size 280 bytes, bus_lcd.o(i.bus_lcd_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_scan_dir
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_flush
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_flush
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_scan_dir
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_flush
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_scan_dir
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_flush
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
</UL>

<P><STRONG><a name="[241]"></a>bus_spi_register</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bus_spi.o(i.bus_spi_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bus_spi_register &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_init_node
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[238]"></a>bus_spich_close</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bus_spi.o(i.bus_spich_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bus_spich_close &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_close
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_close
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
</UL>

<P><STRONG><a name="[246]"></a>bus_spich_cs</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bus_spi.o(i.bus_spich_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_spich_cs
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_read
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readJTD
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_data
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_cmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
</UL>

<P><STRONG><a name="[23a]"></a>bus_spich_open</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bus_spi.o(i.bus_spich_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_get_node
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_open
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
</UL>

<P><STRONG><a name="[249]"></a>bus_spich_opennode</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bus_spi.o(i.bus_spich_opennode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bus_spich_opennode &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_open
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_opennode
</UL>

<P><STRONG><a name="[24a]"></a>bus_spich_register</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bus_spi.o(i.bus_spich_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bus_spich_register &rArr; petite_dev_init_node &rArr; petite_dev_get_node &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_init_node
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[23c]"></a>bus_spich_transfer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bus_spi.o(i.bus_spich_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_read
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readJTD
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
</UL>

<P><STRONG><a name="[226]"></a>bus_uart_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bus_uart.o(i.bus_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[227]"></a>bus_uart_open</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, bus_uart.o(i.bus_uart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bus_uart_open &rArr; mcu_uart_open &rArr; mcu_uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkfifo_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[415]"></a>bus_uart_read</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bus_uart.o(i.bus_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bus_uart_read
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>

<P><STRONG><a name="[250]"></a>bus_uart_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bus_uart.o(i.bus_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bus_uart_write &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[230]"></a>bus_vi2c_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bus_vi2c.o(i.bus_vi2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bus_vi2c_init &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
</UL>

<P><STRONG><a name="[259]"></a>bus_vi2c_sda_input</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_sda_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bus_vi2c_sda_input &rArr; mcu_vi2c_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
</UL>

<P><STRONG><a name="[254]"></a>bus_vi2c_sda_output</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_sda_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
</UL>

<P><STRONG><a name="[231]"></a>bus_vi2c_transfer</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bus_vi2c.o(i.bus_vi2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>

<P><STRONG><a name="[245]"></a>bus_vspi_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_close))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>

<P><STRONG><a name="[242]"></a>bus_vspi_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bus_vspi.o(i.bus_vspi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bus_vspi_init &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
</UL>

<P><STRONG><a name="[248]"></a>bus_vspi_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_open))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_opennode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
</UL>

<P><STRONG><a name="[24c]"></a>bus_vspi_transfer</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, bus_vspi.o(i.bus_vspi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
</UL>

<P><STRONG><a name="[219]"></a>camera_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, camera_api.o(i.camera_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = camera_init &rArr; OV5640_Init &rArr; OV5640_Focus_Init &rArr; OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[6e]"></a>cap_touch_task_idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touch.o(i.cap_touch_task_idle))
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[410]"></a>clear_ctrlc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, console.o(i.clear_ctrlc))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[de]"></a>cli_main_loop</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cmd.o(i.cli_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cli_main_loop &rArr; readline &rArr; readline_into_buffer &rArr; cread_line &rArr; cmd_auto_complete &rArr; print_argv &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;install_auto_complete
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_port.o(i.fun_cmd_init)
</UL>
<P><STRONG><a name="[26e]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, cm_backtrace.o(i.cm_backtrace_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_sp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassembly_ins_is_bl_blx
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[118]"></a>cm_backtrace_fault</STRONG> (Thumb, 434 bytes, Stack size 88 bytes, cm_backtrace.o(i.cm_backtrace_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statck_del_fpu_regs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[274]"></a>cm_backtrace_firmware_info</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cm_backtrace.o(i.cm_backtrace_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cm_backtrace_firmware_info &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[27a]"></a>cm_backtrace_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cm_backtrace.o(i.cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cm_backtrace_init &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
</UL>

<P><STRONG><a name="[27c]"></a>cmd_auto_complete</STRONG> (Thumb, 338 bytes, Stack size 200 bytes, commnad.o(i.cmd_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = cmd_auto_complete &rArr; print_argv &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_argv
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_common_prefix
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[112]"></a>cmd_display</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmd_display.o(i.cmd_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cmd_display &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_port.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>cmd_uart_printf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, log.o(i.cmd_uart_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_argv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_line
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_char
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_version
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_system_info
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main_loop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_display
</UL>

<P><STRONG><a name="[1bf]"></a>cmd_usage</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, commnad.o(i.cmd_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cmd_usage &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[213]"></a>dev_buzzer_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_buzzer.o(i.dev_buzzer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dev_buzzer_init &rArr; mcu_timer_pwm_init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[21b]"></a>dev_dacsound_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dacsound.o(i.dev_dacsound_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dev_dacsound_init &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[214]"></a>dev_key_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_key.o(i.dev_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dev_key_init &rArr; mcu_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[21f]"></a>dev_key_scan</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, drv_key.o(i.dev_key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dev_key_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[212]"></a>dev_keypad_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, drv_keypad.o(i.dev_keypad_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dev_keypad_init &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[220]"></a>dev_keypad_scan</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, drv_keypad.o(i.dev_keypad_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dev_keypad_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[ff]"></a>dev_spiflash_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_spiflash.o(i.dev_spiflash_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_spiflash_close &rArr; bus_spich_close &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[2a4]"></a>dev_spiflash_erase</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_spiflash.o(i.dev_spiflash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_spiflash_erase &rArr; dev_spiflash_waitwriteend &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_spiflash_erase
</UL>

<P><STRONG><a name="[fa]"></a>dev_spiflash_getnode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_getnode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dev_spiflash_getnode &rArr; petite_dev_get_node &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_get_node
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>dev_spiflash_opennode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_spiflash.o(i.dev_spiflash_opennode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dev_spiflash_opennode &rArr; bus_spich_opennode &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_opennode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[2a7]"></a>dev_spiflash_read</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, drv_spiflash.o(i.dev_spiflash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dev_spiflash_read &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_spiflash_read
</UL>

<P><STRONG><a name="[2a9]"></a>dev_spiflash_register</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, drv_spiflash.o(i.dev_spiflash_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dev_spiflash_register &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_init_node
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readJTD
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[2aa]"></a>dev_spiflash_write</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, drv_spiflash.o(i.dev_spiflash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dev_spiflash_write &rArr; dev_spiflash_waitwriteend &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_spiflash_write
</UL>

<P><STRONG><a name="[21a]"></a>dev_tea5767_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_tea5767.o(i.dev_tea5767_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_tea5767_init &rArr; dev_tea5767_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[216]"></a>dev_touchkey_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_touchkey.o(i.dev_touchkey_init))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[222]"></a>dev_touchkey_task</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_touchkey.o(i.dev_touchkey_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dev_touchkey_task &rArr; mcu_timer_cap_init &rArr; TIM_ICInit &rArr; TI3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_scan
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_resetpad
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_iocap
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[21d]"></a>dev_wm8978_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm8978.o(i.dev_wm8978_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dev_wm8978_init &rArr; dev_wm8978_setting_init &rArr; dev_wm8978_inout &rArr; dev_wm8978_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[2b3]"></a>dev_wm8978_inout</STRONG> (Thumb, 512 bytes, Stack size 32 bytes, wm8978.o(i.dev_wm8978_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dev_wm8978_inout &rArr; dev_wm8978_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[2b6]"></a>dev_wm8978_readreg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_readreg))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_aux_gain
</UL>

<P><STRONG><a name="[2b5]"></a>dev_wm8978_set_aux_gain</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm8978.o(i.dev_wm8978_set_aux_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dev_wm8978_set_aux_gain &rArr; dev_wm8978_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_readreg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[2b7]"></a>dev_wm8978_set_mic_gain</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm8978.o(i.dev_wm8978_set_mic_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dev_wm8978_set_mic_gain &rArr; dev_wm8978_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[2b8]"></a>dev_wm8978_set_phone_vol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm8978.o(i.dev_wm8978_set_phone_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dev_wm8978_set_phone_vol &rArr; dev_wm8978_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[2b9]"></a>dev_wm8978_set_spk_vol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm8978.o(i.dev_wm8978_set_spk_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dev_wm8978_set_spk_vol &rArr; dev_wm8978_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[102]"></a>dev_xpt2046_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, xpt2046.o(i.dev_xpt2046_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dev_xpt2046_close &rArr; mcu_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>dev_xpt2046_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xpt2046.o(i.dev_xpt2046_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dev_xpt2046_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>dev_xpt2046_open</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, xpt2046.o(i.dev_xpt2046_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dev_xpt2046_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>dev_xpt2046_task</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, xpt2046.o(i.dev_xpt2046_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dev_xpt2046_task &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_fill_buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(i.dev_xpt2046_open)
</UL>
<P><STRONG><a name="[2f0]"></a>disk_initialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2f1]"></a>disk_ioctl</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[2ed]"></a>disk_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[311]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2c4]"></a>disk_write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[2cb]"></a>display_lcd_put_string</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, display.o(i.display_lcd_put_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = display_lcd_put_string &rArr; display_put_str_to_framebuff &rArr; utf8_2_gbk &rArr; wjq_malloc_m &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[2cc]"></a>display_put_str_to_framebuff</STRONG> (Thumb, 488 bytes, Stack size 104 bytes, display.o(i.display_put_str_to_framebuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = display_put_str_to_framebuff &rArr; utf8_2_gbk &rArr; wjq_malloc_m &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawpoint
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_2_utf16
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_2_gbk
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_ch_from_str
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_lcd_put_string
</UL>

<P><STRONG><a name="[114]"></a>do_help</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, commnad.o(i.do_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = do_help &rArr; _do_help &rArr; cmd_usage &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_port.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>do_system_info</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cmd_sys.o(i.do_system_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = do_system_info &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stime_get_localtime
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_port.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>do_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, commnad.o(i.do_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = do_version &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_port.o(.constdata)
</UL>
<P><STRONG><a name="[16]"></a>drv_IL3820_color_fill</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, drv_il3820.o(i.drv_IL3820_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = drv_IL3820_color_fill &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>drv_IL3820_fill</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, drv_il3820.o(i.drv_IL3820_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = drv_IL3820_fill &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>drv_IL3820_flush</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_il3820.o(i.drv_IL3820_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL3820_flush &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>drv_IL3820_init</STRONG> (Thumb, 582 bytes, Stack size 48 bytes, drv_il3820.o(i.drv_IL3820_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_IL3820_init &rArr; EPD_select_LUT &rArr; drv_il3820_write_data &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_select_LUT
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>drv_IL3820_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_il3820.o(i.drv_IL3820_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_IL3820_lcd_bl &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>drv_IL3820_prepare_display</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_il3820.o(i.drv_IL3820_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL3820_prepare_display &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>drv_IL3820_update</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_il3820.o(i.drv_IL3820_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_IL3820_update &rArr; drv_IL3820_refresh_gram &rArr; drv_il3820_write_data &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>drv_IL91874_color_fill</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, drv_il91874.o(i.drv_IL91874_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drv_IL91874_color_fill &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>drv_IL91874_fill</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, drv_il91874.o(i.drv_IL91874_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = drv_IL91874_fill &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>drv_IL91874_flush</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_il91874.o(i.drv_IL91874_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL91874_flush &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>drv_IL91874_init</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, drv_il91874.o(i.drv_IL91874_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_IL91874_init &rArr; drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_data
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>drv_IL91874_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_il91874.o(i.drv_IL91874_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_IL91874_lcd_bl &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>drv_IL91874_prepare_display</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_il91874.o(i.drv_IL91874_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL91874_prepare_display &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>drv_IL91874_update</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_il91874.o(i.drv_IL91874_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = drv_IL91874_update &rArr; drv_IL91874_refresh_gram &rArr; drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>drv_ILI9325_color_fill</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, drv_ili9325.o(i.drv_ILI9325_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = drv_ILI9325_color_fill &rArr; drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>drv_ILI9325_fill</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, drv_ili9325.o(i.drv_ILI9325_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = drv_ILI9325_fill &rArr; drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>drv_ILI9325_flush</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_ili9325.o(i.drv_ILI9325_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ILI9325_flush &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>drv_ILI9325_init</STRONG> (Thumb, 1358 bytes, Stack size 56 bytes, drv_ili9325.o(i.drv_ILI9325_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_ILI9325_init &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>drv_ILI9325_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_ili9325.o(i.drv_ILI9325_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ILI9325_lcd_bl &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>drv_ILI9325_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, drv_ili9325.o(i.drv_ILI9325_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = drv_ILI9325_prepare_display &rArr; drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>drv_ILI9325_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[2d8]"></a>drv_ILI9325_xy2cp</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, drv_ili9325.o(i.drv_ILI9325_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_ILI9325_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_prepare_display
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
</UL>

<P><STRONG><a name="[3e]"></a>drv_ILI9341_8_color_fill</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, drv_ili9341.o(i.drv_ILI9341_8_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ILI9341_8_color_fill &rArr; drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>drv_ILI9341_8_fill</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, drv_ili9341.o(i.drv_ILI9341_8_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = drv_ILI9341_8_fill &rArr; drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>drv_ILI9341_8_flush</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, drv_ili9341.o(i.drv_ILI9341_8_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = drv_ILI9341_8_flush &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>drv_ILI9341_8_init</STRONG> (Thumb, 832 bytes, Stack size 56 bytes, drv_ili9341.o(i.drv_ILI9341_8_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_ILI9341_8_init &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>drv_ILI9341_8_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, drv_ili9341.o(i.drv_ILI9341_8_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ILI9341_8_prepare_display &rArr; drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[2dc]"></a>drv_ILI9341_8_set_cp_addr</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, drv_ili9341.o(i.drv_ILI9341_8_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_prepare_display
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
</UL>

<P><STRONG><a name="[42]"></a>drv_ILI9341_8_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_8_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>drv_ILI9341_color_fill</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, drv_ili9341.o(i.drv_ILI9341_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ILI9341_color_fill &rArr; drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>drv_ILI9341_fill</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, drv_ili9341.o(i.drv_ILI9341_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ILI9341_fill &rArr; drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>drv_ILI9341_flush</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_ili9341.o(i.drv_ILI9341_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ILI9341_flush &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>drv_ILI9341_init</STRONG> (Thumb, 892 bytes, Stack size 64 bytes, drv_ili9341.o(i.drv_ILI9341_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = drv_ILI9341_init &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>drv_ILI9341_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_ili9341.o(i.drv_ILI9341_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ILI9341_lcd_bl &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_ili9341.o(.data)
<LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>drv_ILI9341_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, drv_ili9341.o(i.drv_ILI9341_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ILI9341_prepare_display &rArr; drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[2dd]"></a>drv_ILI9341_set_cp_addr</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, drv_ili9341.o(i.drv_ILI9341_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_prepare_display
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[38]"></a>drv_ILI9341_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[2db]"></a>drv_ILI9341_xy2cp</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, drv_ili9341.o(i.drv_ILI9341_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_ILI9341_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_prepare_display
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_prepare_display
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[2]"></a>drv_NT35510_color_fill</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, drv_nt35510.o(i.drv_NT35510_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_NT35510_color_fill &rArr; drv_NT35510_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_xy2cp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>drv_NT35510_fill</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, drv_nt35510.o(i.drv_NT35510_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_NT35510_fill &rArr; drv_NT35510_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_xy2cp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>drv_NT35510_flush</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_nt35510.o(i.drv_NT35510_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_NT35510_flush &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>drv_NT35510_init</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, drv_nt35510.o(i.drv_NT35510_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_NT35510_init &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>drv_NT35510_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_nt35510.o(i.drv_NT35510_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_NT35510_lcd_bl &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>drv_NT35510_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, drv_nt35510.o(i.drv_NT35510_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_NT35510_prepare_display &rArr; drv_NT35510_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_xy2cp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[2df]"></a>drv_NT35510_set_cp_addr</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, drv_nt35510.o(i.drv_NT35510_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = drv_NT35510_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_prepare_display
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
</UL>

<P><STRONG><a name="[6]"></a>drv_NT35510_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[2de]"></a>drv_NT35510_xy2cp</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, drv_nt35510.o(i.drv_NT35510_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_NT35510_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_prepare_display
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
</UL>

<P><STRONG><a name="[c]"></a>drv_R61408_color_fill</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, drv_r61408.o(i.drv_R61408_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_R61408_color_fill &rArr; drv_R61408_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_xy2cp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>drv_R61408_fill</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, drv_r61408.o(i.drv_R61408_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_R61408_fill &rArr; drv_R61408_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_xy2cp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>drv_R61408_flush</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_r61408.o(i.drv_R61408_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_R61408_flush &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>drv_R61408_init</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, drv_r61408.o(i.drv_R61408_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_R61408_init &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>drv_R61408_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_r61408.o(i.drv_R61408_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_R61408_lcd_bl &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>drv_R61408_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, drv_r61408.o(i.drv_R61408_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_R61408_prepare_display &rArr; drv_R61408_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_xy2cp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[2e1]"></a>drv_R61408_set_cp_addr</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, drv_r61408.o(i.drv_R61408_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = drv_R61408_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_prepare_display
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
</UL>

<P><STRONG><a name="[10]"></a>drv_R61408_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[2e0]"></a>drv_R61408_xy2cp</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, drv_r61408.o(i.drv_R61408_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_R61408_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_prepare_display
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
</UL>

<P><STRONG><a name="[5a]"></a>drv_ST7565_color_fill</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, drv_str7565.o(i.drv_ST7565_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv_ST7565_color_fill
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>drv_ST7565_drawpoint</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, drv_str7565.o(i.drv_ST7565_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drv_ST7565_drawpoint
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>drv_ST7565_fill</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, drv_str7565.o(i.drv_ST7565_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_ST7565_fill
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>drv_ST7565_flush</STRONG> (Thumb, 220 bytes, Stack size 36 bytes, drv_str7565.o(i.drv_ST7565_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv_ST7565_flush
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>drv_ST7565_init</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, drv_str7565.o(i.drv_ST7565_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_ST7565_init &rArr; drv_ST7565_refresh_gram &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>drv_ST7565_lcd_bl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_ST7565_lcd_bl &rArr; bus_lcd_bl
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>drv_ST7565_prepare_display</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_str7565.o(i.drv_ST7565_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_ST7565_prepare_display
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>drv_ST7565_update</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_str7565.o(i.drv_ST7565_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = drv_ST7565_update &rArr; drv_ST7565_refresh_gram &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>drv_ST7735R_color_fill</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, drv_st7735r.o(i.drv_ST7735R_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ST7735R_color_fill &rArr; drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_xy2cp
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>drv_ST7735R_fill</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, drv_st7735r.o(i.drv_ST7735R_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = drv_ST7735R_fill &rArr; drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_xy2cp
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>drv_ST7735R_flush</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, drv_st7735r.o(i.drv_ST7735R_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = drv_ST7735R_flush &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>drv_ST7735R_init</STRONG> (Thumb, 774 bytes, Stack size 56 bytes, drv_st7735r.o(i.drv_ST7735R_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_ST7735R_init &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>drv_ST7735R_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_st7735r.o(i.drv_ST7735R_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ST7735R_lcd_bl &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>drv_ST7735R_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, drv_st7735r.o(i.drv_ST7735R_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ST7735R_prepare_display &rArr; drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_xy2cp
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[2e4]"></a>drv_ST7735R_set_cp_addr</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, drv_st7735r.o(i.drv_ST7735R_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_prepare_display
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
</UL>

<P><STRONG><a name="[4a]"></a>drv_ST7735R_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_st7735r.o(i.drv_ST7735R_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[2e3]"></a>drv_ST7735R_xy2cp</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, drv_st7735r.o(i.drv_ST7735R_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_ST7735R_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_prepare_display
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
</UL>

<P><STRONG><a name="[50]"></a>drv_ST7789_color_fill</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, drv_st7789.o(i.drv_ST7789_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ST7789_color_fill &rArr; drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_xy2cp
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>drv_ST7789_fill</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, drv_st7789.o(i.drv_ST7789_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = drv_ST7789_fill &rArr; drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_xy2cp
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>drv_ST7789_flush</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, drv_st7789.o(i.drv_ST7789_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = drv_ST7789_flush &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>drv_ST7789_init</STRONG> (Thumb, 584 bytes, Stack size 56 bytes, drv_st7789.o(i.drv_ST7789_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_ST7789_init &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>drv_ST7789_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_st7789.o(i.drv_ST7789_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ST7789_lcd_bl &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>drv_ST7789_prepare_display</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, drv_st7789.o(i.drv_ST7789_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ST7789_prepare_display &rArr; drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_xy2cp
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[2e6]"></a>drv_ST7789_set_cp_addr</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, drv_st7789.o(i.drv_ST7789_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_prepare_display
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
</UL>

<P><STRONG><a name="[54]"></a>drv_ST7789_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_st7789.o(i.drv_ST7789_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[2e5]"></a>drv_ST7789_xy2cp</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, drv_st7789.o(i.drv_ST7789_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_ST7789_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_prepare_display
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
</UL>

<P><STRONG><a name="[14b]"></a>drv_il3820_write_cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drv_il3820.o(i.drv_il3820_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = drv_il3820_write_cmd &rArr; bus_lcd_write_cmd &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_select_LUT
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
</UL>

<P><STRONG><a name="[14c]"></a>drv_il3820_write_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_il3820.o(i.drv_il3820_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_il3820_write_data &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_select_LUT
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
</UL>

<P><STRONG><a name="[2d5]"></a>drv_il91874_write_cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drv_il91874.o(i.drv_il91874_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = drv_il91874_write_cmd &rArr; bus_lcd_write_cmd &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
</UL>

<P><STRONG><a name="[2d6]"></a>drv_il91874_write_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_il91874.o(i.drv_il91874_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
</UL>

<P><STRONG><a name="[63]"></a>drv_ssd1615_display_onoff</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, drv_str7565.o(i.drv_ssd1615_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ssd1615_display_onoff &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>drv_ssd1615_init</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, drv_str7565.o(i.drv_ssd1615_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ssd1615_init &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[41f]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[2e7]"></a>env_complete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, commnad.o(i.env_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = env_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_complete
</UL>

<P><STRONG><a name="[150]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[156]"></a>f_getfree</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_GetVolume
</UL>

<P><STRONG><a name="[2ec]"></a>f_lseek</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
</UL>

<P><STRONG><a name="[2ee]"></a>f_mkfs</STRONG> (Thumb, 1422 bytes, Stack size 96 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = f_mkfs &rArr; get_ldnumber
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
</UL>

<P><STRONG><a name="[2f5]"></a>f_mount</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
</UL>

<P><STRONG><a name="[14f]"></a>f_open</STRONG> (Thumb, 438 bytes, Stack size 608 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fatfs_file_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[153]"></a>f_read</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[2e8]"></a>f_sync</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[152]"></a>f_write</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[1c8]"></a>fal_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fal.o(i.fal_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[1c3]"></a>fal_partition_erase</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fal.o(i.fal_partition_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fal_partition_erase &rArr; petite_partition_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_erase
</UL>

<P><STRONG><a name="[1c9]"></a>fal_partition_find</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fal.o(i.fal_partition_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fal_partition_find &rArr; petite_partition_get &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[1ca]"></a>fal_partition_getblksize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fal.o(i.fal_partition_getblksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fal_partition_getblksize &rArr; petite_partition_getblksize &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_getblksize
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[1cb]"></a>fal_partition_getlen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fal.o(i.fal_partition_getlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fal_partition_getlen &rArr; petite_partition_getlen &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_getlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[1c4]"></a>fal_partition_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fal.o(i.fal_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fal_partition_read &rArr; petite_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>

<P><STRONG><a name="[1c6]"></a>fal_partition_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fal.o(i.fal_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fal_partition_write &rArr; petite_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
</UL>

<P><STRONG><a name="[303]"></a>fdb_blob_make</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fdb_utils.o(i.fdb_blob_make))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_blob_sample
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_basic_sample
</UL>

<P><STRONG><a name="[296]"></a>fdb_calc_crc32</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fdb_utils.o(i.fdb_calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fdb_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv_from_cache
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[301]"></a>fdb_kv_del</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fdb_kvdb.o(i.fdb_kv_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = fdb_kv_del &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_string_sample
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_blob_sample
</UL>

<P><STRONG><a name="[302]"></a>fdb_kv_get</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fdb_kvdb.o(i.fdb_kv_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = fdb_kv_get &rArr; fdb_kv_get_blob &rArr; get_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_is_str
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_string_sample
</UL>

<P><STRONG><a name="[304]"></a>fdb_kv_get_blob</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fdb_kvdb.o(i.fdb_kv_get_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = fdb_kv_get_blob &rArr; get_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_blob_sample
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_basic_sample
</UL>

<P><STRONG><a name="[307]"></a>fdb_kv_set</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, fdb_kvdb.o(i.fdb_kv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = fdb_kv_set &rArr; fdb_kv_set_blob &rArr; set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_string_sample
</UL>

<P><STRONG><a name="[308]"></a>fdb_kv_set_blob</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fdb_kvdb.o(i.fdb_kv_set_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = fdb_kv_set_blob &rArr; set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_blob_sample
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_basic_sample
</UL>

<P><STRONG><a name="[1cf]"></a>fdb_kv_set_default</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, fdb_kvdb.o(i.fdb_kv_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
</UL>

<P><STRONG><a name="[30a]"></a>fdb_kvdb_control</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, fdb_kvdb.o(i.fdb_kvdb_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fdb_kvdb_control &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashdb_demo
</UL>

<P><STRONG><a name="[30b]"></a>fdb_kvdb_init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, fdb_kvdb.o(i.fdb_kvdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_finish
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashdb_demo
</UL>

<P><STRONG><a name="[29c]"></a>ff_oem2uni</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[29f]"></a>ff_uni2oem</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[284]"></a>ff_wtoupper</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[286]"></a>find_cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, commnad.o(i.find_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;install_auto_complete_handler
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[20a]"></a>flashdb_demo</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, flashdb_demo.o(i.flashdb_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = flashdb_demo &rArr; fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_string_sample
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_blob_sample
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_basic_sample
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_control
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
</UL>

<P><STRONG><a name="[2cf]"></a>font_get_ch_from_str</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, petite_font.o(i.font_get_ch_from_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = font_get_ch_from_str
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_gbk_get_area
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
</UL>

<P><STRONG><a name="[317]"></a>font_wjq_create_from_file</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, font_wjq.o(i.font_wjq_create_from_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = font_wjq_create_from_file &rArr; vfs_open &rArr; wjq_malloc_m &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[dd]"></a>font_wjq_get_glyph_bitmap</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, font_wjq.o(i.font_wjq_get_glyph_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = font_wjq_get_glyph_bitmap &rArr; vfs_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_index_gbk_wjq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_wjq.o(i.font_wjq_create_from_file)
</UL>
<P><STRONG><a name="[dc]"></a>font_wjq_get_glyph_dsc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, font_wjq.o(i.font_wjq_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = font_wjq_get_glyph_dsc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_wjq.o(i.font_wjq_create_from_file)
</UL>
<P><STRONG><a name="[ce]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[319]"></a>fun_cmd_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmd_port.o(i.fun_cmd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fun_cmd_init &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_task
</UL>

<P><STRONG><a name="[31a]"></a>fun_sound_stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, soundplay.o(i.fun_sound_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fun_sound_stop &rArr; vfs_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_close
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
</UL>

<P><STRONG><a name="[221]"></a>fun_sound_task</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, soundplay.o(i.fun_sound_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fun_sound_task &rArr; vfs_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[2f4]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[28d]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getc &rArr; serial_getc &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[411]"></a>had_ctrlc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, console.o(i.had_ctrlc))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[269]"></a>install_auto_complete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, commnad.o(i.install_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = install_auto_complete &rArr; install_auto_complete_handler &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;install_auto_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main_loop
</UL>

<P><STRONG><a name="[313]"></a>kvdb_basic_sample</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, kvdb_basic_sample.o(i.kvdb_basic_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = kvdb_basic_sample &rArr; fdb_kv_set_blob &rArr; set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashdb_demo
</UL>

<P><STRONG><a name="[315]"></a>kvdb_type_blob_sample</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, kvdb_type_blob_sample.o(i.kvdb_type_blob_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = kvdb_type_blob_sample &rArr; fdb_kv_set_blob &rArr; set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_del
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashdb_demo
</UL>

<P><STRONG><a name="[314]"></a>kvdb_type_string_sample</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, kvdb_type_string_sample.o(i.kvdb_type_string_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = kvdb_type_string_sample &rArr; fdb_kv_set &rArr; fdb_kv_set_blob &rArr; set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_del
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashdb_demo
</UL>

<P><STRONG><a name="[42f]"></a>lcd_backlight</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_lcd.o(i.lcd_backlight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_backlight
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[322]"></a>lcd_dev_register</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, drv_lcd.o(i.lcd_dev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lcd_dev_register &rArr; petite_dev_init_node &rArr; petite_dev_get_node &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_init_node
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setdir
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_finddrv
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[2d0]"></a>lcd_drawpoint</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_lcd.o(i.lcd_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_drawpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
</UL>

<P><STRONG><a name="[325]"></a>lcd_open</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_lcd.o(i.lcd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lcd_open &rArr; petite_dev_get_node &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_get_node
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[324]"></a>lcd_setdir</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, drv_lcd.o(i.lcd_setdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_setdir
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dev_register
</UL>

<P><STRONG><a name="[430]"></a>lcd_update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_lcd.o(i.lcd_update))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[349]"></a>lfs_crc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lfs_util.o(i.lfs_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[36b]"></a>lfs_file_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = lfs_file_close &rArr; lfs_file_rawclose &rArr; lfs_file_rawsync &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_file_close
</UL>

<P><STRONG><a name="[370]"></a>lfs_file_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_demove &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopen
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_file_open
</UL>

<P><STRONG><a name="[37c]"></a>lfs_file_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lfs_file_read &rArr; lfs_file_rawread &rArr; lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_file_read
</UL>

<P><STRONG><a name="[37d]"></a>lfs_file_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_file_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lfs_file_seek &rArr; lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_file_lseek
</UL>

<P><STRONG><a name="[37e]"></a>lfs_file_tell</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_file_tell))
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawtell
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_file_tell
</UL>

<P><STRONG><a name="[380]"></a>lfs_file_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lfs_file_write &rArr; lfs_file_rawwrite &rArr; lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_file_write
</UL>

<P><STRONG><a name="[381]"></a>lfs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = lfs_format &rArr; lfs_rawformat &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_lfs
</UL>

<P><STRONG><a name="[386]"></a>lfs_mount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lfs_mount &rArr; lfs_rawmount &rArr; lfs_dir_getgstate &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_lfs
</UL>

<P><STRONG><a name="[228]"></a>log_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, log.o(i.log_init))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[cb]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; petite_app &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[39b]"></a>math_log2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, maths.o(i.math_log2))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
</UL>

<P><STRONG><a name="[129]"></a>mcu_adc_IRQhandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mcu_adc.o(i.mcu_adc_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mcu_adc_IRQhandler &rArr; ADC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[217]"></a>mcu_adc_temprate_init</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, mcu_adc.o(i.mcu_adc_temprate_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mcu_adc_temprate_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[130]"></a>mcu_can1_rx0_IRQ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mcu_can.o(i.mcu_can1_rx0_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mcu_can1_rx0_IRQ &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>mcu_dcmi_dma_process</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_dma_process))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>mcu_dcmi_frame_process</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_frame_process))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[20f]"></a>mcu_fsmc_lcd_Init</STRONG> (Thumb, 382 bytes, Stack size 136 bytes, stm324xg_eval_fsmc_sram.o(i.mcu_fsmc_lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mcu_fsmc_lcd_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[244]"></a>mcu_hspi_close</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mcu_spi.o(i.mcu_hspi_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcu_hspi_close &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>

<P><STRONG><a name="[243]"></a>mcu_hspi_init</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, mcu_spi.o(i.mcu_hspi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mcu_hspi_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log2
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
</UL>

<P><STRONG><a name="[247]"></a>mcu_hspi_open</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, mcu_spi.o(i.mcu_hspi_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mcu_hspi_open &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_opennode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
</UL>

<P><STRONG><a name="[24b]"></a>mcu_hspi_transfer</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, mcu_spi.o(i.mcu_hspi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_hspi_transfer &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
</UL>

<P><STRONG><a name="[145]"></a>mcu_i2s_dma_process</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_process))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[1e0]"></a>mcu_i2s_dma_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_stop))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_close
</UL>

<P><STRONG><a name="[21c]"></a>mcu_i2s_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mcu_i2s.o(i.mcu_i2s_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_i2s_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[144]"></a>mcu_i2sext_dma_process</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2sext_dma_process))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[261]"></a>mcu_io_config_in</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mcu_io.o(i.mcu_io_config_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
</UL>

<P><STRONG><a name="[233]"></a>mcu_io_config_out</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mcu_io.o(i.mcu_io_config_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_resetpad
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
</UL>

<P><STRONG><a name="[2a2]"></a>mcu_io_config_timer</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mcu_io.o(i.mcu_io_config_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_io_config_timer &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log2
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_iocap
</UL>

<P><STRONG><a name="[225]"></a>mcu_io_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mcu_io.o(i.mcu_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[25b]"></a>mcu_io_input_readbit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_input_readbit))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_scan
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readsda
</UL>

<P><STRONG><a name="[236]"></a>mcu_io_output_resetbit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_output_resetbit))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_opennode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
</UL>

<P><STRONG><a name="[234]"></a>mcu_io_output_setbit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_output_setbit))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_resetpad
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
</UL>

<P><STRONG><a name="[229]"></a>mcu_rtc_init</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, mcu_rtc.o(i.mcu_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mcu_rtc_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[1a6]"></a>mcu_tim3_IRQhandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mcu_timer.o(i.mcu_tim3_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcu_tim3_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>mcu_tim5_IRQhandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mcu_timer.o(i.mcu_tim5_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcu_tim5_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>mcu_tim7_IRQhandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mcu_timer.o(i.mcu_tim7_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcu_tim7_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[2ae]"></a>mcu_timer_cap_init</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, mcu_timer.o(i.mcu_timer_cap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mcu_timer_cap_init &rArr; TIM_ICInit &rArr; TI3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[2bc]"></a>mcu_timer_config</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, mcu_timer.o(i.mcu_timer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mcu_timer_config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
</UL>

<P><STRONG><a name="[2b0]"></a>mcu_timer_get_cap</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, mcu_timer.o(i.mcu_timer_get_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_timer_get_cap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[2bb]"></a>mcu_timer_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mcu_timer.o(i.mcu_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mcu_timer_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_init
</UL>

<P><STRONG><a name="[2a3]"></a>mcu_timer_pwm_init</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, mcu_timer.o(i.mcu_timer_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mcu_timer_pwm_init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
</UL>

<P><STRONG><a name="[2af]"></a>mcu_timer_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mcu_timer.o(i.mcu_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
</UL>

<P><STRONG><a name="[2ba]"></a>mcu_timer_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mcu_timer.o(i.mcu_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_close
</UL>

<P><STRONG><a name="[1b2]"></a>mcu_uart1_IRQhandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mcu_uart.o(i.mcu_uart1_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_uart1_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>mcu_uart2_IRQhandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mcu_uart.o(i.mcu_uart2_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_uart2_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>mcu_uart3_IRQhandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mcu_uart.o(i.mcu_uart3_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_uart3_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[3c6]"></a>mcu_uart_init</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, mcu_uart.o(i.mcu_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mcu_uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
</UL>

<P><STRONG><a name="[24f]"></a>mcu_uart_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mcu_uart_open &rArr; mcu_uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
</UL>

<P><STRONG><a name="[251]"></a>mcu_uart_write</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mcu_uart.o(i.mcu_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_write
</UL>

<P><STRONG><a name="[25c]"></a>mcu_vi2c_io_config_in</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mcu_io.o(i.mcu_vi2c_io_config_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_vi2c_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_input
</UL>

<P><STRONG><a name="[257]"></a>mcu_vi2c_io_config_out</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mcu_io.o(i.mcu_vi2c_io_config_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
</UL>

<P><STRONG><a name="[3cd]"></a>osDelay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_task
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>

<P><STRONG><a name="[3da]"></a>osKernelInitialize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
</UL>

<P><STRONG><a name="[3cf]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
</UL>

<P><STRONG><a name="[22c]"></a>osMutexAcquire</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMutexAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_opennode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
</UL>

<P><STRONG><a name="[22f]"></a>osMutexNew</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
</UL>

<P><STRONG><a name="[22a]"></a>osMutexRelease</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_opennode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>

<P><STRONG><a name="[1a4]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[208]"></a>osThreadNew</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_cmd_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_init
</UL>

<P><STRONG><a name="[3d9]"></a>parse_line</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cmd.o(i.parse_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = parse_line &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[38a]"></a>petite_app</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, petite.o(i.petite_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = petite_app &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22b]"></a>petite_dev_get_node</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, petite_dev.o(i.petite_dev_get_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = petite_dev_get_node &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_init_node
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_getnode
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_open
</UL>

<P><STRONG><a name="[22e]"></a>petite_dev_init_node</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, petite_dev.o(i.petite_dev_init_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = petite_dev_init_node &rArr; petite_dev_get_node &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_get_node
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dev_register
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
</UL>

<P><STRONG><a name="[210]"></a>petite_dev_register</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, petite_dev.o(i.petite_dev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = petite_dev_register &rArr; dev_spiflash_register &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dev_register
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[2fb]"></a>petite_partition_erase</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, partition.o(i.petite_partition_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = petite_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_sto_erase
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>

<P><STRONG><a name="[2fc]"></a>petite_partition_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, partition.o(i.petite_partition_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = petite_partition_get &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
</UL>

<P><STRONG><a name="[2fd]"></a>petite_partition_getblksize</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, partition.o(i.petite_partition_getblksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = petite_partition_getblksize &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_lfs
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_getblksize
</UL>

<P><STRONG><a name="[2fe]"></a>petite_partition_getlen</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, partition.o(i.petite_partition_getlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = petite_partition_getlen &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_lfs
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_getlen
</UL>

<P><STRONG><a name="[211]"></a>petite_partition_init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, partition.o(i.petite_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = petite_partition_init &rArr; vfs_mount &rArr; vfs_mount_lfs &rArr; lfs_format &rArr; lfs_rawformat &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_storage_getlen
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[2ff]"></a>petite_partition_read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, partition.o(i.petite_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = petite_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_sto_read
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[300]"></a>petite_partition_write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, partition.o(i.petite_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = petite_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_sto_prog
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>

<P><STRONG><a name="[3db]"></a>petite_storage_getlen</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, partition.o(i.petite_storage_getlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = petite_storage_getlen &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_init
</UL>

<P><STRONG><a name="[e9]"></a>petite_task</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, petite.o(i.petite_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = petite_task &rArr; board_init &rArr; petite_partition_init &rArr; vfs_mount &rArr; vfs_mount_lfs &rArr; lfs_format &rArr; lfs_rawformat &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_cmd_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> petite.o(i.petite_app)
</UL>
<P><STRONG><a name="[24e]"></a>pkfifo_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, p_kfifo.o(i.pkfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pkfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
</UL>

<P><STRONG><a name="[280]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = putc &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_char
</UL>

<P><STRONG><a name="[26d]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main_loop
</UL>

<P><STRONG><a name="[40b]"></a>pvPortMalloc</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[439]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[3f9]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[26a]"></a>readline</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(i.readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = readline &rArr; readline_into_buffer &rArr; cread_line &rArr; cmd_auto_complete &rArr; print_argv &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main_loop
</UL>

<P><STRONG><a name="[40e]"></a>readline_into_buffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cmd.o(i.readline_into_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = readline_into_buffer &rArr; cread_line &rArr; cmd_auto_complete &rArr; print_argv &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline
</UL>

<P><STRONG><a name="[2bd]"></a>rtp_fill_buff</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, touch.o(i.rtp_fill_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rtp_fill_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
</UL>

<P><STRONG><a name="[26c]"></a>run_command</STRONG> (Thumb, 254 bytes, Stack size 88 bytes, cmd.o(i.run_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = run_command &rArr; process_macros
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;had_ctrlc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ctrlc
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_line
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_macros
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main_loop
</UL>

<P><STRONG><a name="[209]"></a>sd_fatfs_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sd_fat.o(i.sd_fatfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = sd_fatfs_init &rArr; FatFs_FileTest &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_GetVolume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
</UL>

<P><STRONG><a name="[412]"></a>sdcard_fatfs_init</STRONG> (Thumb, 92 bytes, Stack size 528 bytes, sd_fat.o(i.sdcard_fatfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = sdcard_fatfs_init &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>

<P><STRONG><a name="[31e]"></a>serial_getc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cmd_port.o(i.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = serial_getc &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_read
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[40a]"></a>serial_putc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmd_port.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_write
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[10b]"></a>storage_empty_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, partition.o(i.storage_empty_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = storage_empty_close &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> partition.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>storage_empty_erase</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, partition.o(i.storage_empty_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = storage_empty_erase &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> partition.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>storage_empty_getblksize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, partition.o(i.storage_empty_getblksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = storage_empty_getblksize &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> partition.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>storage_empty_getdev</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, partition.o(i.storage_empty_getdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = storage_empty_getdev &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> partition.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>storage_empty_getsize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, partition.o(i.storage_empty_getsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = storage_empty_getsize &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> partition.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>storage_empty_open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, partition.o(i.storage_empty_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = storage_empty_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> partition.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>storage_empty_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, partition.o(i.storage_empty_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = storage_empty_read &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> partition.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>storage_empty_write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, partition.o(i.storage_empty_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = storage_empty_write &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> partition.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>storage_spiflash_erase</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, drv_spiflash.o(i.storage_spiflash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = storage_spiflash_erase &rArr; dev_spiflash_erase &rArr; dev_spiflash_waitwriteend &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>storage_spiflash_getblksize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_spiflash.o(i.storage_spiflash_getblksize))
<BR>[Address Reference Count : 1]<UL><LI> drv_spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>storage_spiflash_getsize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_spiflash.o(i.storage_spiflash_getsize))
<BR>[Address Reference Count : 1]<UL><LI> drv_spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>storage_spiflash_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_spiflash.o(i.storage_spiflash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = storage_spiflash_read &rArr; dev_spiflash_read &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>storage_spiflash_write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_spiflash.o(i.storage_spiflash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = storage_spiflash_write &rArr; dev_spiflash_write &rArr; dev_spiflash_waitwriteend &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[416]"></a>tlsf_add_pool</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tlsf.o(i.tlsf_add_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tlsf_add_pool &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_pool_overhead
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_used
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_size
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_prev_used
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_prev_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_down
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create_with_pool
</UL>

<P><STRONG><a name="[41a]"></a>tlsf_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tlsf.o(i.tlsf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tlsf_create &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_construct
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create_with_pool
</UL>

<P><STRONG><a name="[64]"></a>tlsf_create_with_pool</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tlsf.o(i.tlsf_create_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tlsf_create_with_pool &rArr; tlsf_add_pool &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_size
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_malloc.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>tlsf_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tlsf.o(i.tlsf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tlsf_free &rArr; block_merge_prev &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_prev
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_from_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_malloc.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>tlsf_malloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tlsf.o(i.tlsf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tlsf_malloc &rArr; block_prepare_used &rArr; block_trim_free &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_malloc.o(.data)
</UL>
<P><STRONG><a name="[417]"></a>tlsf_pool_overhead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsf.o(i.tlsf_pool_overhead))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
</UL>

<P><STRONG><a name="[67]"></a>tlsf_realloc</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tlsf.o(i.tlsf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tlsf_realloc &rArr; tlsf_malloc &rArr; block_prepare_used &rArr; block_trim_free &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_used
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_size
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_is_free
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_from_ptr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_malloc.o(.data)
</UL>
<P><STRONG><a name="[41c]"></a>tlsf_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tlsf.o(i.tlsf_size))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create_with_pool
</UL>

<P><STRONG><a name="[215]"></a>tp_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, touch.o(i.tp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tp_init &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[14e]"></a>uart_printf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, log.o(i.uart_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormat
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_2_gbk
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_finish
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_del
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_string_sample
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_type_blob_sample
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvdb_basic_sample
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_control
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_GetVolume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_create_from_file
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_wjq_get_glyph_bitmap
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_bitmaphead
</UL>

<P><STRONG><a name="[2cd]"></a>utf8_2_gbk</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, conv.o(i.utf8_2_gbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = utf8_2_gbk &rArr; wjq_malloc_m &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_2_utf16
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
</UL>

<P><STRONG><a name="[2ce]"></a>utf8_2_utf16</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, conv.o(i.utf8_2_utf16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = utf8_2_utf16
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_2_gbk
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
</UL>

<P><STRONG><a name="[3e0]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[428]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[43d]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[41e]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, petite.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vApplicationStackOverflowHook &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[3e8]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[3f8]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[3e2]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[3e1]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[3e4]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[3e6]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[3ef]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[431]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3f2]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, port.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSuppressTicksAndSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_pre_sleep
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_post_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[423]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[3d3]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[403]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[3ce]"></a>vTaskDelay</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[436]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[409]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[31b]"></a>vTaskName</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskName))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
</UL>

<P><STRONG><a name="[426]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[425]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[427]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[31c]"></a>vTaskStackAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskStackAddr))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
</UL>

<P><STRONG><a name="[31d]"></a>vTaskStackSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskStackSize))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
</UL>

<P><STRONG><a name="[3d0]"></a>vTaskStartScheduler</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[422]"></a>vTaskStepTick</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[3f1]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[117]"></a>vTaskSwitchContext</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[e1]"></a>var_complete</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, commnad.o(i.var_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = var_complete &rArr; env_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commnad.o(i.install_auto_complete)
</UL>
<P><STRONG><a name="[20c]"></a>vfs_close</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, vfs.o(i.vfs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vfs_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
</UL>

<P><STRONG><a name="[ec]"></a>vfs_fatfs_file_open</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, vfs.o(i.vfs_fatfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = vfs_fatfs_file_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_fatfs_mount)
</UL>
<P><STRONG><a name="[42c]"></a>vfs_fatfs_mount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vfs.o(i.vfs_fatfs_mount))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount
</UL>

<P><STRONG><a name="[f5]"></a>vfs_lfs_file_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vfs.o(i.vfs_lfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = vfs_lfs_file_close &rArr; lfs_file_close &rArr; lfs_file_rawclose &rArr; lfs_file_rawsync &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[f4]"></a>vfs_lfs_file_lseek</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vfs.o(i.vfs_lfs_file_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = vfs_lfs_file_lseek &rArr; lfs_file_seek &rArr; lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[f1]"></a>vfs_lfs_file_open</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, vfs.o(i.vfs_lfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = vfs_lfs_file_open &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_demove &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[f2]"></a>vfs_lfs_file_read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vfs.o(i.vfs_lfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = vfs_lfs_file_read &rArr; lfs_file_read &rArr; lfs_file_rawread &rArr; lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[f6]"></a>vfs_lfs_file_tell</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vfs.o(i.vfs_lfs_file_tell))
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_tell
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[f3]"></a>vfs_lfs_file_write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vfs.o(i.vfs_lfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = vfs_lfs_file_write &rArr; lfs_file_write &rArr; lfs_file_rawwrite &rArr; lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[ef]"></a>vfs_lfs_sto_erase</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vfs.o(i.vfs_lfs_sto_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vfs_lfs_sto_erase &rArr; petite_partition_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[ee]"></a>vfs_lfs_sto_prog</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vfs.o(i.vfs_lfs_sto_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vfs_lfs_sto_prog &rArr; petite_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[ed]"></a>vfs_lfs_sto_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vfs.o(i.vfs_lfs_sto_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vfs_lfs_sto_read &rArr; petite_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[f0]"></a>vfs_lfs_sto_sync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vfs.o(i.vfs_lfs_sto_sync))
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.vfs_mount_lfs)
</UL>
<P><STRONG><a name="[1e7]"></a>vfs_lseek</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, vfs.o(i.vfs_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vfs_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_wjq_get_glyph_bitmap
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_glyph_bitmap
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_bitmaphead
</UL>

<P><STRONG><a name="[3dc]"></a>vfs_mount</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, vfs.o(i.vfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = vfs_mount &rArr; vfs_mount_lfs &rArr; lfs_format &rArr; lfs_rawformat &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_lfs
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fatfs_mount
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_init
</UL>

<P><STRONG><a name="[42d]"></a>vfs_mount_lfs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, vfs.o(i.vfs_mount_lfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = vfs_mount_lfs &rArr; lfs_format &rArr; lfs_rawformat &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_getlen
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_getblksize
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount
</UL>

<P><STRONG><a name="[1e3]"></a>vfs_open</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, vfs.o(i.vfs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vfs_open &rArr; wjq_malloc_m &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_get
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_wjq_create_from_file
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_create_from_file
</UL>

<P><STRONG><a name="[1e4]"></a>vfs_read</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, vfs.o(i.vfs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vfs_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_create_from_file
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_wjq_get_glyph_bitmap
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_glyph_bitmap
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_bitmaphead
</UL>

<P><STRONG><a name="[20b]"></a>vfs_write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, vfs.o(i.vfs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vfs_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
</UL>

<P><STRONG><a name="[42e]"></a>wjq_alloc_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, p_malloc.o(i.wjq_alloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wjq_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
</UL>

<P><STRONG><a name="[1e5]"></a>wjq_free_m</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, p_malloc.o(i.wjq_free_m))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_2_gbk
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_wjq_create_from_file
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_create_from_file
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_glyph_bitmap
</UL>

<P><STRONG><a name="[12f]"></a>wjq_log</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, log.o(i.wjq_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can1_rx0_IRQ
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_init_node
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_get_node
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_opennode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_prepare_display
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_prepare_display
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_prepare_display
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_flush
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_fill
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_color_fill
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_drawpoint
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_display_onoff
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_prepare_display
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_flush
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_fill
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_color_fill
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_drawpoint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_display_onoff
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_prepare_display
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_prepare_display
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_prepare_display
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dev_register
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_prepare_display
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_cmd_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_task
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_getlen
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_getblksize
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_get
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lfs_file_open
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_fatfs_file_open
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty_write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty_read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty_open
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty_getsize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty_getdev
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty_getblksize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty_erase
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty_close
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_storage_getlen
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_wjq_create_from_file
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_create_from_file
</UL>

<P><STRONG><a name="[1e2]"></a>wjq_malloc_m</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, p_malloc.o(i.wjq_malloc_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wjq_malloc_m &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dev_register
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount_lfs
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_partition_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_2_gbk
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_put_str_to_framebuff
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_malloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_wjq_create_from_file
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_create_from_file
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_glyph_bitmap
</UL>

<P><STRONG><a name="[20d]"></a>wujique_stm407_test</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, wujique_test.o(i.wujique_stm407_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wujique_stm407_test &rArr; display_lcd_put_string &rArr; display_put_str_to_framebuff &rArr; utf8_2_gbk &rArr; wjq_malloc_m &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_open
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_lcd_put_string
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_wjq_create_from_file
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_create_from_file
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
</UL>

<P><STRONG><a name="[42a]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3d6]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[312]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashdb_demo
</UL>

<P><STRONG><a name="[3d2]"></a>xQueueCreateMutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[3d1]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[435]"></a>xQueueGenericCreate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[3e9]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[3f6]"></a>xQueueGenericReset</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[3d4]"></a>xQueueGenericSend</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
</UL>

<P><STRONG><a name="[438]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[401]"></a>xQueueReceive</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[389]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock
</UL>

<P><STRONG><a name="[437]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[3d8]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[3d7]"></a>xTaskCreateStatic</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3d5]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[404]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[434]"></a>xTaskIncrementTick</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[3ee]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[43b]"></a>xTaskPriorityInherit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[408]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[3f3]"></a>xTaskResumeAll</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[429]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3fe]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[103]"></a>xpt2046_task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xpt2046.o(i.xpt2046_task))
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(.constdata)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a5]"></a>SetSysClock</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[176]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[177]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[1ac]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ae]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1b0]"></a>TI3_Config</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1aa]"></a>TI4_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2a8]"></a>dev_spiflash_readJTD</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, drv_spiflash.o(i.dev_spiflash_readJTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dev_spiflash_readJTD &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
</UL>

<P><STRONG><a name="[2a6]"></a>dev_spiflash_waitwriteend</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, drv_spiflash.o(i.dev_spiflash_waitwriteend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dev_spiflash_waitwriteend &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
</UL>

<P><STRONG><a name="[2a5]"></a>dev_spiflash_writeen</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_spiflash.o(i.dev_spiflash_writeen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dev_spiflash_writeen &rArr; bus_spich_transfer &rArr; bus_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
</UL>

<P><STRONG><a name="[2ab]"></a>dev_tea5767_writereg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_tea5767.o(i.dev_tea5767_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dev_tea5767_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_init
</UL>

<P><STRONG><a name="[2ac]"></a>dev_touchkey_iocap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_touchkey.o(i.dev_touchkey_iocap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dev_touchkey_iocap &rArr; mcu_io_config_timer &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[2ad]"></a>dev_touchkey_resetpad</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_touchkey.o(i.dev_touchkey_resetpad))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dev_touchkey_resetpad &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[2b1]"></a>dev_touchkey_scan</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, drv_touchkey.o(i.dev_touchkey_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dev_touchkey_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[131]"></a>CmdError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[134]"></a>CmdResp1Error</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[137]"></a>CmdResp2Error</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[138]"></a>CmdResp3Error</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[139]"></a>CmdResp6Error</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[13a]"></a>CmdResp7Error</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[157]"></a>FindSCR</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[17a]"></a>SDEnWideBus</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[186]"></a>SD_NVIC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[7]"></a>drv_NT35510_display_onoff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_nt35510.o(i.drv_NT35510_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = drv_NT35510_display_onoff &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>drv_NT35510_drawpoint</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, drv_nt35510.o(i.drv_NT35510_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_NT35510_drawpoint &rArr; drv_NT35510_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_xy2cp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>drv_NT35510_scan_dir</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, drv_nt35510.o(i.drv_NT35510_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_NT35510_scan_dir &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>drv_R61408_display_onoff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_r61408.o(i.drv_R61408_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = drv_R61408_display_onoff &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>drv_R61408_drawpoint</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, drv_r61408.o(i.drv_R61408_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_R61408_drawpoint &rArr; drv_R61408_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_xy2cp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>drv_R61408_scan_dir</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drv_r61408.o(i.drv_R61408_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_R61408_scan_dir &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>drv_IL3820_display_onoff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_il3820.o(i.drv_IL3820_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL3820_display_onoff &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>drv_IL3820_drawpoint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_il3820.o(i.drv_IL3820_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL3820_drawpoint &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[2d4]"></a>drv_IL3820_refresh_gram</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, drv_il3820.o(i.drv_IL3820_refresh_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = drv_IL3820_refresh_gram &rArr; drv_il3820_write_data &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_update
</UL>

<P><STRONG><a name="[1c]"></a>drv_IL3820_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>drv_IL91874_display_onoff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_il91874.o(i.drv_IL91874_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL91874_display_onoff &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>drv_IL91874_drawpoint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_il91874.o(i.drv_IL91874_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL91874_drawpoint &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[2d7]"></a>drv_IL91874_refresh_gram</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, drv_il91874.o(i.drv_IL91874_refresh_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_IL91874_refresh_gram &rArr; drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_data
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_update
</UL>

<P><STRONG><a name="[26]"></a>drv_IL91874_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_il91874.o(i.drv_IL91874_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> drv_il91874.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>drv_ILI9325_display_onoff</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, drv_ili9325.o(i.drv_ILI9325_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ILI9325_display_onoff &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>drv_ILI9325_drawpoint</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, drv_ili9325.o(i.drv_ILI9325_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = drv_ILI9325_drawpoint &rArr; drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>drv_ILI9325_scan_dir</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, drv_ili9325.o(i.drv_ILI9325_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = drv_ILI9325_scan_dir &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[2d9]"></a>drv_ILI9325_set_cp_addr</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, drv_ili9325.o(i.drv_ILI9325_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_prepare_display
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
</UL>

<P><STRONG><a name="[3d]"></a>drv_ILI9341_8_drawpoint</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, drv_ili9341.o(i.drv_ILI9341_8_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ILI9341_8_drawpoint &rArr; drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>drv_ILI9341_8_scan_dir</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, drv_ili9341.o(i.drv_ILI9341_8_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ILI9341_8_scan_dir &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>drv_ILI9341_display_onoff</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_ili9341.o(i.drv_ILI9341_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ILI9341_display_onoff &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_ili9341.o(.data)
<LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>drv_ILI9341_drawpoint</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, drv_ili9341.o(i.drv_ILI9341_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ILI9341_drawpoint &rArr; drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>drv_ILI9341_scan_dir</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, drv_ili9341.o(i.drv_ILI9341_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ILI9341_scan_dir &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[323]"></a>lcd_finddrv</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_lcd.o(i.lcd_finddrv))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dev_register
</UL>

<P><STRONG><a name="[4b]"></a>drv_ST7735R_display_onoff</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_st7735r.o(i.drv_ST7735R_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ST7735R_display_onoff &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>drv_ST7735R_drawpoint</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, drv_st7735r.o(i.drv_ST7735R_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ST7735R_drawpoint &rArr; drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_xy2cp
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>drv_ST7735R_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_st7735r.o(i.drv_ST7735R_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> drv_st7735r.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>drv_ST7789_display_onoff</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_st7789.o(i.drv_ST7789_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ST7789_display_onoff &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>drv_ST7789_drawpoint</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, drv_st7789.o(i.drv_ST7789_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = drv_ST7789_drawpoint &rArr; drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_xy2cp
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>drv_ST7789_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_st7789.o(i.drv_ST7789_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> drv_st7789.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>drv_ST7565_display_onoff</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_str7565.o(i.drv_ST7565_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_ST7565_display_onoff &rArr; bus_lcd_open &rArr; bus_spich_open &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[2e2]"></a>drv_ST7565_refresh_gram</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, drv_str7565.o(i.drv_ST7565_refresh_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = drv_ST7565_refresh_gram &rArr; bus_lcd_write_data &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_update
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[60]"></a>drv_ST7565_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_scan_dir))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[15e]"></a>OV2640_ReadID</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_ov2640.o(i.OV2640_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OV2640_ReadID &rArr; OV2640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[160]"></a>OV2640_ReadReg</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_ov2640.o(i.OV2640_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OV2640_ReadReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadID
</UL>

<P><STRONG><a name="[15f]"></a>OV2640_WriteReg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, drv_ov2640.o(i.OV2640_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OV2640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadID
</UL>

<P><STRONG><a name="[167]"></a>OV5640_I2C_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ov5640.o(i.OV5640_I2C_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OV5640_I2C_close &rArr; bus_i2c_close &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Sharpness
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565_Mode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Light_Mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Contrast
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Color_Saturation
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Brightness
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
</UL>

<P><STRONG><a name="[165]"></a>OV5640_I2C_open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ov5640.o(i.OV5640_I2C_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OV5640_I2C_open &rArr; bus_i2c_open &rArr; osMutexAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Sharpness
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565_Mode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Light_Mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Contrast
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Color_Saturation
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Brightness
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
</UL>

<P><STRONG><a name="[168]"></a>OV5640_ReadReg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ov5640.o(i.OV5640_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OV5640_ReadReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
</UL>

<P><STRONG><a name="[166]"></a>OV5640_WriteReg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ov5640.o(i.OV5640_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OV5640_WriteReg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Sharpness
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565_Mode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Light_Mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Contrast
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Color_Saturation
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Brightness
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
</UL>

<P><STRONG><a name="[2b2]"></a>dev_wm8978_setting_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, wm8978.o(i.dev_wm8978_setting_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dev_wm8978_setting_init &rArr; dev_wm8978_inout &rArr; dev_wm8978_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_spk_vol
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_phone_vol
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_mic_gain
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_aux_gain
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
</UL>

<P><STRONG><a name="[2b4]"></a>dev_wm8978_writereg</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, wm8978.o(i.dev_wm8978_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dev_wm8978_writereg &rArr; bus_i2c_transfer &rArr; bus_vi2c_transfer &rArr; bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_spk_vol
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_phone_vol
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_mic_gain
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_aux_gain
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[42b]"></a>vfs_get_dir_name</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, vfs.o(i.vfs_get_dir_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vfs_get_dir_name &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>

<P><STRONG><a name="[1db]"></a>adjust_request_size</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tlsf.o(i.adjust_request_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adjust_request_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_up
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
</UL>

<P><STRONG><a name="[418]"></a>align_down</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlsf.o(i.align_down))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
</UL>

<P><STRONG><a name="[1dc]"></a>align_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlsf.o(i.align_up))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>

<P><STRONG><a name="[1e8]"></a>block_absorb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tlsf.o(i.block_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = block_absorb &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_size
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_prev
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[1eb]"></a>block_can_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tlsf.o(i.block_can_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_can_split
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_used
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_free
</UL>

<P><STRONG><a name="[41d]"></a>block_from_ptr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsf.o(i.block_from_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[1ec]"></a>block_insert</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tlsf.o(i.block_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_used
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_free
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[1fb]"></a>block_is_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlsf.o(i.block_is_free))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
</UL>

<P><STRONG><a name="[1fe]"></a>block_is_prev_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlsf.o(i.block_is_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_prev
</UL>

<P><STRONG><a name="[1ea]"></a>block_link_next</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tlsf.o(i.block_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_free
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>

<P><STRONG><a name="[1f0]"></a>block_locate_free</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tlsf.o(i.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_locate_free &rArr; mapping_search &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_suitable_block
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
</UL>

<P><STRONG><a name="[1f4]"></a>block_mark_as_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tlsf.o(i.block_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_prev_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[1f7]"></a>block_mark_as_used</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tlsf.o(i.block_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = block_mark_as_used &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_used
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_prev_used
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
</UL>

<P><STRONG><a name="[1fa]"></a>block_merge_next</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tlsf.o(i.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_is_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_used
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[1fd]"></a>block_merge_prev</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tlsf.o(i.block_merge_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_merge_prev &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prev
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_is_prev_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>

<P><STRONG><a name="[1ef]"></a>block_next</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tlsf.o(i.block_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_to_ptr
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
</UL>

<P><STRONG><a name="[202]"></a>block_prepare_used</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tlsf.o(i.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = block_prepare_used &rArr; block_trim_free &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_free
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_to_ptr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
</UL>

<P><STRONG><a name="[1ff]"></a>block_prev</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsf.o(i.block_prev))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_prev
</UL>

<P><STRONG><a name="[1fc]"></a>block_remove</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tlsf.o(i.block_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_prev
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[1f6]"></a>block_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlsf.o(i.block_set_free))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
</UL>

<P><STRONG><a name="[1f5]"></a>block_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlsf.o(i.block_set_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_free
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
</UL>

<P><STRONG><a name="[1f8]"></a>block_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlsf.o(i.block_set_prev_used))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_used
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
</UL>

<P><STRONG><a name="[205]"></a>block_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tlsf.o(i.block_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
</UL>

<P><STRONG><a name="[1f9]"></a>block_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlsf.o(i.block_set_used))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
</UL>

<P><STRONG><a name="[1e9]"></a>block_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlsf.o(i.block_size))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_can_split
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
</UL>

<P><STRONG><a name="[204]"></a>block_split</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tlsf.o(i.block_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_block
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_to_ptr
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_size
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_size
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_used
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_trim_free
</UL>

<P><STRONG><a name="[200]"></a>block_to_ptr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsf.o(i.block_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>

<P><STRONG><a name="[203]"></a>block_trim_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tlsf.o(i.block_trim_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = block_trim_free &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next &rArr; block_next
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_prev_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[206]"></a>block_trim_used</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tlsf.o(i.block_trim_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = block_trim_used &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_set_prev_used
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_realloc
</UL>

<P><STRONG><a name="[41b]"></a>control_construct</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, tlsf.o(i.control_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = control_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_create
</UL>

<P><STRONG><a name="[1ee]"></a>insert_free_block</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, tlsf.o(i.insert_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>

<P><STRONG><a name="[1ed]"></a>mapping_insert</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tlsf.o(i.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>

<P><STRONG><a name="[1f1]"></a>mapping_search</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tlsf.o(i.mapping_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mapping_search &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_fls
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[201]"></a>offset_to_block</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsf.o(i.offset_to_block))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_add_pool
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>

<P><STRONG><a name="[1f3]"></a>remove_free_block</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tlsf.o(i.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[1f2]"></a>search_suitable_block</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tlsf.o(i.search_suitable_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = search_suitable_block
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[414]"></a>tlsf_ffs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tlsf.o(i.tlsf_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_suitable_block
</UL>

<P><STRONG><a name="[38b]"></a>tlsf_fls</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tlsf.o(i.tlsf_fls))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[252]"></a>bus_vi2c_ack</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bus_vi2c.o(i.bus_vi2c_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bus_vi2c_ack &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[256]"></a>bus_vi2c_delay</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bus_vi2c.o(i.bus_vi2c_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
</UL>

<P><STRONG><a name="[258]"></a>bus_vi2c_readbyte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bus_vi2c.o(i.bus_vi2c_readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bus_vi2c_readbyte &rArr; bus_vi2c_sda_input &rArr; mcu_vi2c_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_input
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readsda
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[25a]"></a>bus_vi2c_readsda</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bus_vi2c.o(i.bus_vi2c_readsda))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_vi2c_readsda
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
</UL>

<P><STRONG><a name="[253]"></a>bus_vi2c_scl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_scl))
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
</UL>

<P><STRONG><a name="[255]"></a>bus_vi2c_sda</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_sda))
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
</UL>

<P><STRONG><a name="[25d]"></a>bus_vi2c_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bus_vi2c.o(i.bus_vi2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bus_vi2c_start &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[25e]"></a>bus_vi2c_stop</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bus_vi2c.o(i.bus_vi2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
</UL>

<P><STRONG><a name="[260]"></a>bus_vi2c_wait_ack</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bus_vi2c.o(i.bus_vi2c_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bus_vi2c_wait_ack &rArr; bus_vi2c_stop &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_input
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readsda
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[25f]"></a>bus_vi2c_writebyte</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bus_vi2c.o(i.bus_vi2c_writebyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bus_vi2c_writebyte &rArr; bus_vi2c_sda_output &rArr; mcu_vi2c_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[3ec]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[3ed]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[43a]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[3f4]"></a>prvInitialiseMutex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[3f5]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[3fb]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[3fc]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[407]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[3df]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[3e3]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[3ea]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[3eb]"></a>prvDeleteTCB</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[3f0]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[eb]"></a>prvIdleTask</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[3f7]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[3e5]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[43c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[3e7]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[406]"></a>prvGetNextExpireTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3fa]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[3fd]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[3ff]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[402]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[400]"></a>prvSampleTimeNow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[405]"></a>prvSwitchTimerLists</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[f7]"></a>prvTimerTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[40c]"></a>prvHeapInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[40d]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ea]"></a>prvTaskExitError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[327]"></a>lfs_aligndown</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lfs.o(i.lfs_aligndown))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>

<P><STRONG><a name="[326]"></a>lfs_alignup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_alignup))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[328]"></a>lfs_alloc</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lfs.o(i.lfs_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_drop
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[32c]"></a>lfs_alloc_ack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_alloc_ack))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_drop
</UL>

<P><STRONG><a name="[32b]"></a>lfs_alloc_drop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lfs.o(i.lfs_alloc_drop))
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[e2]"></a>lfs_alloc_lookahead</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lfs.o(i.lfs_alloc_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_alloc_lookahead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_alloc)
</UL>
<P><STRONG><a name="[32d]"></a>lfs_bd_cmp</STRONG> (Thumb, 102 bytes, Stack size 80 bytes, lfs.o(i.lfs_bd_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[335]"></a>lfs_bd_erase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lfs.o(i.lfs_bd_erase))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[32f]"></a>lfs_bd_flush</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lfs.o(i.lfs_bd_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_sync
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>

<P><STRONG><a name="[331]"></a>lfs_bd_prog</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lfs.o(i.lfs_bd_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[32e]"></a>lfs_bd_read</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, lfs.o(i.lfs_bd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedread
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
</UL>

<P><STRONG><a name="[333]"></a>lfs_bd_sync</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lfs.o(i.lfs_bd_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lfs_bd_sync &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[330]"></a>lfs_cache_zero</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lfs.o(i.lfs_cache_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_cache_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[337]"></a>lfs_ctz</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lfs.o(i.lfs_ctz))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[334]"></a>lfs_ctz_extend</STRONG> (Thumb, 356 bytes, Stack size 88 bytes, lfs.o(i.lfs_ctz_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
</UL>

<P><STRONG><a name="[33a]"></a>lfs_ctz_find</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, lfs.o(i.lfs_ctz_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lfs_ctz_find &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedread
</UL>

<P><STRONG><a name="[33b]"></a>lfs_ctz_fromle32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lfs.o(i.lfs_ctz_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_ctz_fromle32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[336]"></a>lfs_ctz_index</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lfs.o(i.lfs_ctz_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfs_ctz_index
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[33d]"></a>lfs_ctz_tole32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lfs.o(i.lfs_ctz_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_ctz_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
</UL>

<P><STRONG><a name="[33e]"></a>lfs_ctz_traverse</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, lfs.o(i.lfs_ctz_traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lfs_ctz_traverse &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
</UL>

<P><STRONG><a name="[33f]"></a>lfs_deinit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lfs.o(i.lfs_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawunmount
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
</UL>

<P><STRONG><a name="[340]"></a>lfs_dir_alloc</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, lfs.o(i.lfs_dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lfs_dir_alloc &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
</UL>

<P><STRONG><a name="[341]"></a>lfs_dir_commit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lfs.o(i.lfs_dir_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[e3]"></a>lfs_dir_commit_commit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lfs.o(i.lfs_dir_commit_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lfs_dir_commit_commit &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lfs.o(i.lfs_dir_compact)
<LI> lfs.o(i.lfs_dir_relocatingcommit)
</UL>
<P><STRONG><a name="[e5]"></a>lfs_dir_commit_size</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lfs.o(i.lfs_dir_commit_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_dir_commit_size &rArr; lfs_tag_dsize
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_dir_splittingcompact)
</UL>
<P><STRONG><a name="[344]"></a>lfs_dir_commitattr</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, lfs.o(i.lfs_dir_commitattr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit_commit
</UL>

<P><STRONG><a name="[348]"></a>lfs_dir_commitcrc</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, lfs.o(i.lfs_dir_commitcrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lfs_dir_commitcrc &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_sync
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[347]"></a>lfs_dir_commitprog</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lfs.o(i.lfs_dir_commitprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
</UL>

<P><STRONG><a name="[34a]"></a>lfs_dir_compact</STRONG> (Thumb, 560 bytes, Stack size 152 bytes, lfs.o(i.lfs_dir_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_xor
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_tole32
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_iszero
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_needsrelocation
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
</UL>

<P><STRONG><a name="[355]"></a>lfs_dir_fetch</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lfs.o(i.lfs_dir_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
</UL>

<P><STRONG><a name="[356]"></a>lfs_dir_fetchmatch</STRONG> (Thumb, 1042 bytes, Stack size 112 bytes, lfs.o(i.lfs_dir_fetchmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
</UL>

<P><STRONG><a name="[359]"></a>lfs_dir_find</STRONG> (Thumb, 334 bytes, Stack size 88 bytes, lfs.o(i.lfs_dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[e4]"></a>lfs_dir_find_match</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, lfs.o(i.lfs_dir_find_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lfs_dir_find_match &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lfs.o(i.lfs_dir_find)
<LI> lfs.o(i.lfs_rawmount)
</UL>
<P><STRONG><a name="[35c]"></a>lfs_dir_get</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, lfs.o(i.lfs_dir_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[352]"></a>lfs_dir_getgstate</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lfs.o(i.lfs_dir_getgstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lfs_dir_getgstate &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_xor
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[35e]"></a>lfs_dir_getread</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, lfs.o(i.lfs_dir_getread))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lfs_dir_getread &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedread
</UL>

<P><STRONG><a name="[35d]"></a>lfs_dir_getslice</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, lfs.o(i.lfs_dir_getslice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
</UL>

<P><STRONG><a name="[34b]"></a>lfs_dir_needsrelocation</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lfs.o(i.lfs_dir_needsrelocation))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[342]"></a>lfs_dir_orphaningcommit</STRONG> (Thumb, 830 bytes, Stack size 152 bytes, lfs.o(i.lfs_dir_orphaningcommit))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasorphans
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_prepmove
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[362]"></a>lfs_dir_relocatingcommit</STRONG> (Thumb, 718 bytes, Stack size 144 bytes, lfs.o(i.lfs_dir_relocatingcommit))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_xor
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_tole32
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_iszero
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
</UL>

<P><STRONG><a name="[369]"></a>lfs_dir_split</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, lfs.o(i.lfs_dir_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
</UL>

<P><STRONG><a name="[368]"></a>lfs_dir_splittingcompact</STRONG> (Thumb, 342 bytes, Stack size 96 bytes, lfs.o(i.lfs_dir_splittingcompact))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_needsrelocation
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
</UL>

<P><STRONG><a name="[34d]"></a>lfs_dir_traverse</STRONG> (Thumb, 644 bytes, Stack size 248 bytes, lfs.o(i.lfs_dir_traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lfs_dir_traverse &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[e6]"></a>lfs_dir_traverse_filter</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lfs.o(i.lfs_dir_traverse_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_dir_traverse_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_dir_traverse)
</UL>
<P><STRONG><a name="[361]"></a>lfs_file_flush</STRONG> (Thumb, 234 bytes, Stack size 112 bytes, lfs.o(i.lfs_file_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedread
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
</UL>

<P><STRONG><a name="[36d]"></a>lfs_file_flushedread</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, lfs.o(i.lfs_file_flushedread))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lfs_file_flushedread &rArr; lfs_dir_getread &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[36e]"></a>lfs_file_flushedwrite</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, lfs.o(i.lfs_file_flushedwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[360]"></a>lfs_file_outline</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lfs.o(i.lfs_file_outline))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lfs_file_outline &rArr; lfs_file_relocate &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
</UL>

<P><STRONG><a name="[36c]"></a>lfs_file_rawclose</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lfs.o(i.lfs_file_rawclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = lfs_file_rawclose &rArr; lfs_file_rawsync &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_remove
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[371]"></a>lfs_file_rawopen</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, lfs.o(i.lfs_file_rawopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_demove &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
</UL>

<P><STRONG><a name="[374]"></a>lfs_file_rawopencfg</STRONG> (Thumb, 580 bytes, Stack size 80 bytes, lfs.o(i.lfs_file_rawopencfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_demove &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_append
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_malloc
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopen
</UL>

<P><STRONG><a name="[378]"></a>lfs_file_rawread</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lfs.o(i.lfs_file_rawread))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lfs_file_rawread &rArr; lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedread
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
</UL>

<P><STRONG><a name="[379]"></a>lfs_file_rawseek</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lfs.o(i.lfs_file_rawseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsize
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
</UL>

<P><STRONG><a name="[37a]"></a>lfs_file_rawsize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lfs.o(i.lfs_file_rawsize))
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
</UL>

<P><STRONG><a name="[372]"></a>lfs_file_rawsync</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, lfs.o(i.lfs_file_rawsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = lfs_file_rawsync &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
</UL>

<P><STRONG><a name="[37f]"></a>lfs_file_rawtell</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_file_rawtell))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_tell
</UL>

<P><STRONG><a name="[37b]"></a>lfs_file_rawwrite</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lfs.o(i.lfs_file_rawwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lfs_file_rawwrite &rArr; lfs_file_flush &rArr; lfs_file_flushedwrite &rArr; lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
</UL>

<P><STRONG><a name="[36f]"></a>lfs_file_relocate</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, lfs.o(i.lfs_file_relocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lfs_file_relocate &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[346]"></a>lfs_frombe32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lfs.o(i.lfs_frombe32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_frombe32
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
</UL>

<P><STRONG><a name="[339]"></a>lfs_fromle32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lfs.o(i.lfs_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[383]"></a>lfs_fs_demove</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, lfs.o(i.lfs_fs_demove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = lfs_fs_demove &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmove
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_prepmove
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
</UL>

<P><STRONG><a name="[343]"></a>lfs_fs_deorphan</STRONG> (Thumb, 480 bytes, Stack size 176 bytes, lfs.o(i.lfs_fs_deorphan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasorphans
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_prepmove
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[375]"></a>lfs_fs_forceconsistency</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lfs.o(i.lfs_fs_forceconsistency))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = lfs_fs_forceconsistency &rArr; lfs_fs_demove &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[363]"></a>lfs_fs_parent</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, lfs.o(i.lfs_fs_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lfs_fs_parent &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
</UL>

<P><STRONG><a name="[e7]"></a>lfs_fs_parent_match</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, lfs.o(i.lfs_fs_parent_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lfs_fs_parent_match &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_fs_parent)
</UL>
<P><STRONG><a name="[366]"></a>lfs_fs_pred</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lfs.o(i.lfs_fs_pred))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lfs_fs_pred &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
</UL>

<P><STRONG><a name="[365]"></a>lfs_fs_prepmove</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lfs.o(i.lfs_fs_prepmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_fs_prepmove
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
</UL>

<P><STRONG><a name="[364]"></a>lfs_fs_preporphans</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lfs.o(i.lfs_fs_preporphans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_fs_preporphans
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasorphans
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
</UL>

<P><STRONG><a name="[36a]"></a>lfs_fs_rawsize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lfs.o(i.lfs_fs_rawsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lfs_fs_rawsize &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
</UL>

<P><STRONG><a name="[32a]"></a>lfs_fs_rawtraverse</STRONG> (Thumb, 328 bytes, Stack size 96 bytes, lfs.o(i.lfs_fs_rawtraverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[e8]"></a>lfs_fs_size_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lfs.o(i.lfs_fs_size_count))
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_fs_rawsize)
</UL>
<P><STRONG><a name="[384]"></a>lfs_gstate_hasmove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lfs.o(i.lfs_gstate_hasmove))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
</UL>

<P><STRONG><a name="[358]"></a>lfs_gstate_hasmovehere</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lfs.o(i.lfs_gstate_hasmovehere))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_gstate_hasmovehere
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[367]"></a>lfs_gstate_hasorphans</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lfs.o(i.lfs_gstate_hasorphans))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
</UL>

<P><STRONG><a name="[353]"></a>lfs_gstate_iszero</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lfs.o(i.lfs_gstate_iszero))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[354]"></a>lfs_gstate_tole32</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lfs.o(i.lfs_gstate_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_gstate_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[351]"></a>lfs_gstate_xor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lfs.o(i.lfs_gstate_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_gstate_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[385]"></a>lfs_init</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, lfs.o(i.lfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lfs_init &rArr; lfs_malloc &rArr; wjq_malloc_m &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_malloc
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
</UL>

<P><STRONG><a name="[377]"></a>lfs_malloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lfs_malloc &rArr; wjq_malloc_m &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[332]"></a>lfs_max</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_max))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsize
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>

<P><STRONG><a name="[329]"></a>lfs_min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_min))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedwrite
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flushedread
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[376]"></a>lfs_mlist_append</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_mlist_append))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[373]"></a>lfs_mlist_remove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lfs.o(i.lfs_mlist_remove))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
</UL>

<P><STRONG><a name="[34c]"></a>lfs_pair_cmp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lfs.o(i.lfs_pair_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_splittingcompact
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[350]"></a>lfs_pair_fromle32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lfs.o(i.lfs_pair_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_pair_fromle32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[34e]"></a>lfs_pair_isnull</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lfs.o(i.lfs_pair_isnull))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[34f]"></a>lfs_pair_tole32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lfs.o(i.lfs_pair_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_pair_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_relocatingcommit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_orphaningcommit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[382]"></a>lfs_rawformat</STRONG> (Thumb, 234 bytes, Stack size 104 bytes, lfs.o(i.lfs_rawformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = lfs_rawformat &rArr; lfs_dir_commit &rArr; lfs_fs_deorphan &rArr; lfs_dir_orphaningcommit &rArr; lfs_dir_relocatingcommit &rArr; lfs_dir_splittingcompact &rArr; lfs_dir_split &rArr; lfs_dir_compact &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
</UL>

<P><STRONG><a name="[387]"></a>lfs_rawmount</STRONG> (Thumb, 582 bytes, Stack size 112 bytes, lfs.o(i.lfs_rawmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lfs_rawmount &rArr; lfs_dir_getgstate &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawunmount
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_iszero
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_drop
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
</UL>

<P><STRONG><a name="[388]"></a>lfs_rawunmount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_rawunmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_rawunmount &rArr; lfs_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
</UL>

<P><STRONG><a name="[345]"></a>lfs_tag_dsize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lfs.o(i.lfs_tag_dsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_tag_dsize
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit_size
</UL>

<P><STRONG><a name="[35f]"></a>lfs_tag_isdelete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lfs.o(i.lfs_tag_isdelete))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
</UL>

<P><STRONG><a name="[357]"></a>lfs_tag_splice</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lfs.o(i.lfs_tag_splice))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[338]"></a>lfs_tole32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lfs.o(i.lfs_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_tole32
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_tole32
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[264]"></a>check_fs</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[29d]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2c3]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[283]"></a>cmp_lfn</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[290]"></a>create_chain</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[299]"></a>create_name</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[29a]"></a>dbc_1st</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[29b]"></a>dbc_2nd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2be]"></a>dir_alloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2c1]"></a>dir_clear</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2c5]"></a>dir_find</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2c0]"></a>dir_next</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[2c7]"></a>dir_register</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2bf]"></a>dir_sdi</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[2ea]"></a>find_volume</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[2f6]"></a>follow_path</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2c9]"></a>gen_numname</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[291]"></a>get_fat</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[2ef]"></a>get_ldnumber</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2f7]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[2eb]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[266]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[267]"></a>mem_cmp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[2c8]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[29e]"></a>mem_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[265]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[292]"></a>put_fat</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[2ca]"></a>put_lfn</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2f9]"></a>remove_chain</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2f8]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2f3]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[2f2]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[2c6]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2fa]"></a>sync_fs</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2c2]"></a>sync_window</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[2e9]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[da]"></a>lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flashdb_demo.o(i.lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb_demo.o(i.flashdb_demo)
</UL>
<P><STRONG><a name="[db]"></a>unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flashdb_demo.o(i.unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb_demo.o(i.flashdb_demo)
</UL>
<P><STRONG><a name="[1dd]"></a>align_write</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, fdb_kvdb.o(i.align_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = align_write &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; petite_partition_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[1de]"></a>alloc_kv</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, fdb_kvdb.o(i.alloc_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
</UL>

<P><STRONG><a name="[d4]"></a>alloc_kv_cb</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fdb_kvdb.o(i.alloc_kv_cb))
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.alloc_kv)
</UL>
<P><STRONG><a name="[d1]"></a>check_and_recovery_gc_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fdb_kvdb.o(i.check_and_recovery_gc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = check_and_recovery_gc_cb &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i._fdb_kv_load)
</UL>
<P><STRONG><a name="[d2]"></a>check_and_recovery_kv_cb</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, fdb_kvdb.o(i.check_and_recovery_kv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = check_and_recovery_kv_cb &rArr; move_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i._fdb_kv_load)
</UL>
<P><STRONG><a name="[d0]"></a>check_sec_hdr_cb</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fdb_kvdb.o(i.check_sec_hdr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = check_sec_hdr_cb &rArr; format_sector &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i._fdb_kv_load)
</UL>
<P><STRONG><a name="[293]"></a>create_kv_blob</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, fdb_kvdb.o(i.create_kv_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = create_kv_blob &rArr; new_kv &rArr; alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_kv_hdr
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
</UL>

<P><STRONG><a name="[2a0]"></a>del_kv</STRONG> (Thumb, 250 bytes, Stack size 128 bytes, fdb_kvdb.o(i.del_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_del
</UL>

<P><STRONG><a name="[e0]"></a>do_gc</STRONG> (Thumb, 208 bytes, Stack size 112 bytes, fdb_kvdb.o(i.do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = do_gc &rArr; move_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.gc_collect)
</UL>
<P><STRONG><a name="[305]"></a>fdb_is_str</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fdb_kvdb.o(i.fdb_is_str))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get
</UL>

<P><STRONG><a name="[2a1]"></a>find_kv</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fdb_kvdb.o(i.find_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv_from_cache
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_no_cache
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
</UL>

<P><STRONG><a name="[d9]"></a>find_kv_cb</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fdb_kvdb.o(i.find_kv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = find_kv_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.find_kv_no_cache)
</UL>
<P><STRONG><a name="[30e]"></a>find_kv_no_cache</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, fdb_kvdb.o(i.find_kv_no_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
</UL>

<P><STRONG><a name="[30f]"></a>find_next_kv_addr</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, fdb_kvdb.o(i.find_next_kv_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = find_next_kv_addr &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; petite_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
</UL>

<P><STRONG><a name="[268]"></a>format_sector</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fdb_kvdb.o(i.format_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = format_sector &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_set_status
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_erase
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
</UL>

<P><STRONG><a name="[df]"></a>gc_check_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fdb_kvdb.o(i.gc_check_cb))
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.gc_collect)
</UL>
<P><STRONG><a name="[1d1]"></a>gc_collect</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, fdb_kvdb.o(i.gc_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = gc_collect &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_gc_cb
</UL>

<P><STRONG><a name="[306]"></a>get_kv</STRONG> (Thumb, 74 bytes, Stack size 112 bytes, fdb_kvdb.o(i.get_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = get_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
</UL>

<P><STRONG><a name="[30d]"></a>get_kv_from_cache</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, fdb_kvdb.o(i.get_kv_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_kv_from_cache &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; petite_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
</UL>

<P><STRONG><a name="[2d2]"></a>get_next_kv_addr</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fdb_kvdb.o(i.get_next_kv_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_next_kv_addr &rArr; find_next_kv_addr &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; petite_partition_read
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_kv_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[321]"></a>get_next_sector_addr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fdb_kvdb.o(i.get_next_sector_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
</UL>

<P><STRONG><a name="[310]"></a>get_sector_from_cache</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fdb_kvdb.o(i.get_sector_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_kv_addr
</UL>

<P><STRONG><a name="[1d0]"></a>kv_iterator</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, fdb_kvdb.o(i.kv_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_no_cache
</UL>

<P><STRONG><a name="[262]"></a>move_kv</STRONG> (Thumb, 326 bytes, Stack size 224 bytes, fdb_kvdb.o(i.move_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = move_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_no_cache
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
</UL>

<P><STRONG><a name="[294]"></a>new_kv</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, fdb_kvdb.o(i.new_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = new_kv &rArr; alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv_ex
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[3cc]"></a>new_kv_ex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdb_kvdb.o(i.new_kv_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = new_kv_ex &rArr; new_kv &rArr; alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
</UL>

<P><STRONG><a name="[2d1]"></a>read_kv</STRONG> (Thumb, 344 bytes, Stack size 104 bytes, fdb_kvdb.o(i.read_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[320]"></a>read_sector_info</STRONG> (Thumb, 416 bytes, Stack size 136 bytes, fdb_kvdb.o(i.read_sector_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_continue_ff_addr
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
</UL>

<P><STRONG><a name="[1ce]"></a>sector_iterator</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fdb_kvdb.o(i.sector_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
</UL>

<P><STRONG><a name="[d3]"></a>sector_statistics_cb</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fdb_kvdb.o(i.sector_statistics_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sector_statistics_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.alloc_kv)
</UL>
<P><STRONG><a name="[309]"></a>set_kv</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, fdb_kvdb.o(i.set_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv_ex
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
</UL>

<P><STRONG><a name="[263]"></a>update_kv_cache</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fdb_kvdb.o(i.update_kv_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = update_kv_cache &rArr; fdb_calc_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
</UL>

<P><STRONG><a name="[295]"></a>update_sec_status</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, fdb_kvdb.o(i.update_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = update_sec_status &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[298]"></a>update_sector_cache</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fdb_kvdb.o(i.update_sector_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[297]"></a>write_kv_hdr</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fdb_kvdb.o(i.write_kv_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = write_kv_hdr &rArr; _fdb_write_status &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[272]"></a>disassembly_ins_is_bl_blx</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cm_backtrace.o(i.disassembly_ins_is_bl_blx))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[277]"></a>dump_stack</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cm_backtrace.o(i.dump_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dump_stack &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[278]"></a>fault_diagnosis</STRONG> (Thumb, 564 bytes, Stack size 16 bytes, cm_backtrace.o(i.fault_diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fault_diagnosis &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[275]"></a>get_cur_thread_name</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cm_backtrace.o(i.get_cur_thread_name))
<BR><BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskName
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[26f]"></a>get_cur_thread_stack_info</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cm_backtrace.o(i.get_cur_thread_stack_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_cur_thread_stack_info &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStackSize
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStackAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[279]"></a>print_call_stack</STRONG> (Thumb, 126 bytes, Stack size 96 bytes, cm_backtrace.o(i.print_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[276]"></a>statck_del_fpu_regs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cm_backtrace.o(i.statck_del_fpu_regs))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[288]"></a>cread_add_char</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, cmd.o(i.cread_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cread_add_char &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_str
</UL>

<P><STRONG><a name="[28a]"></a>cread_add_str</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, cmd.o(i.cread_add_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cread_add_str &rArr; cread_add_char &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[28b]"></a>cread_add_to_hist</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cmd.o(i.cread_add_to_hist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cread_add_to_hist
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[28c]"></a>cread_line</STRONG> (Thumb, 894 bytes, Stack size 80 bytes, cmd.o(i.cread_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = cread_line &rArr; cmd_auto_complete &rArr; print_argv &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_prev
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_next
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_to_hist
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_str
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_char
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
</UL>

<P><STRONG><a name="[40f]"></a>hist_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cmd.o(i.hist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
</UL>

<P><STRONG><a name="[28e]"></a>hist_next</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cmd.o(i.hist_next))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[28f]"></a>hist_prev</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmd.o(i.hist_prev))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[3de]"></a>process_macros</STRONG> (Thumb, 250 bytes, Stack size 160 bytes, cmd.o(i.process_macros))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = process_macros
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[27e]"></a>complete_cmdv</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, commnad.o(i.complete_cmdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
</UL>

<P><STRONG><a name="[1be]"></a>find_cmd_tbl</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, commnad.o(i.find_cmd_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
</UL>

<P><STRONG><a name="[27f]"></a>find_common_prefix</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, commnad.o(i.find_common_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = find_common_prefix
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
</UL>

<P><STRONG><a name="[31f]"></a>install_auto_complete_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commnad.o(i.install_auto_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = install_auto_complete_handler &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;install_auto_complete
</UL>

<P><STRONG><a name="[27d]"></a>make_argv</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, commnad.o(i.make_argv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
</UL>

<P><STRONG><a name="[281]"></a>print_argv</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, commnad.o(i.print_argv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = print_argv &rArr; cmd_uart_printf &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uart_printf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
</UL>

<P><STRONG><a name="[1e6]"></a>bitmapfont_get_bitmaphead</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, font_unicode.o(i.bitmapfont_get_bitmaphead))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bitmapfont_get_bitmaphead &rArr; vfs_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_glyph_dsc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmapfont_get_glyph_bitmap
</UL>

<P><STRONG><a name="[318]"></a>font_index_gbk_wjq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, font_wjq.o(i.font_index_gbk_wjq))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_wjq_get_glyph_bitmap
</UL>

<P><STRONG><a name="[316]"></a>font_gbk_get_area</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, petite_font.o(i.font_gbk_get_area))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_ch_from_str
</UL>

<P><STRONG><a name="[1d6]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b8]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1d9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cf]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
